/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_maEngine(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_maEngine(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_maEngine(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "Common/Module.h"



#include "Engine/Module.h"



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT double SWIGSTDCALL CSharp_FEPS_get() {
  double jresult ;
  double result;
  
  result = (double)(1.0e-6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FMAX_get() {
  double jresult ;
  double result;
  
  result = (double)(1.0e+6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FNAN_get() {
  double jresult ;
  double result;
  
  result = (double)((1.0e+6+1.0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MIN_NODE_SCALE_get() {
  double jresult ;
  double result;
  
  result = (double)(0.0001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__16F_DIG_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp__16F_EPSILON_get() {
  double jresult ;
  double result;
  
  result = (double)(4.8875809e-4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__16F_MANT_DIG_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp__16F_MAX_get() {
  double jresult ;
  double result;
  
  result = (double)(6.550400e+004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__16F_MAX_10_EXP_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__16F_MAX_EXP_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp__16F_MIN_get() {
  double jresult ;
  double result;
  
  result = (double)(6.1035156e-5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__16F_MIN_10_EXP_get() {
  int jresult ;
  int result;
  
  result = (int)((-4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__16F_MIN_EXP_get() {
  int jresult ;
  int result;
  
  result = (int)((-14));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__16F_RADIX_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__16F_ROUNDS_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_FLOAT_SMALL_get() {
  double jresult ;
  double result;
  
  result = (double)(1.0e-37);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_TOLERANCE_get() {
  double jresult ;
  double result;
  
  result = (double)(2e-37);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_E_get() {
  double jresult ;
  double result;
  
  result = (double)(2.71828182845904523536);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_LOG10E_get() {
  double jresult ;
  double result;
  
  result = (double)(0.4342944819032518);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_LOG2E_get() {
  double jresult ;
  double result;
  
  result = (double)(1.442695040888963387);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_PI_get() {
  double jresult ;
  double result;
  
  result = (double)(3.14159265358979323846);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_PIOVER2_get() {
  double jresult ;
  double result;
  
  result = (double)(1.57079632679489661923);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_PIOVER4_get() {
  double jresult ;
  double result;
  
  result = (double)(0.785398163397448309616);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_PIX2_get() {
  double jresult ;
  double result;
  
  result = (double)(6.28318530717958647693);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MATH_EPSILON_get() {
  double jresult ;
  double result;
  
  result = (double)(0.000001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M_1_PI_get() {
  double jresult ;
  double result;
  
  result = (double)(0.31830988618379067154);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NULL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_X_set(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Uint32 arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Uint32)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_X_get(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Uint32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = (Uint32) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_Y_set(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Uint32 arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Uint32)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_Y_get(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Uint32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = (Uint32) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_Width_set(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Uint32 arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Uint32)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_Width_get(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Uint32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = (Uint32) ((arg1)->Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_Height_set(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Uint32 arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Uint32)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_Height_get(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Uint32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = (Uint32) ((arg1)->Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_MinZ_set(void * jarg1, float jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  float arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MinZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Viewport_MinZ_get(void * jarg1) {
  float jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  float result;
  
  arg1 = (Viewport *)jarg1; 
  result = (float) ((arg1)->MinZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_MaxZ_set(void * jarg1, float jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  float arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MaxZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Viewport_MaxZ_get(void * jarg1) {
  float jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  float result;
  
  arg1 = (Viewport *)jarg1; 
  result = (float) ((arg1)->MaxZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Viewport() {
  void * jresult ;
  Viewport *result = 0 ;
  
  result = (Viewport *)new Viewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Viewport(void * jarg1) {
  Viewport *arg1 = (Viewport *) 0 ;
  
  arg1 = (Viewport *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_0() {
  void * jresult ;
  Vector2 *result = 0 ;
  
  result = (Vector2 *)new Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_1(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Vector2 *)new Vector2((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2 *)new Vector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2_isZero(void * jarg1) {
  unsigned int jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  bool result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (bool)((Vector2 const *)arg1)->isZero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_rotate(void * jarg1, void * jarg2, float jarg3) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->rotate((Vector2 const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_zero() {
  void * jresult ;
  Vector2 result;
  
  result = Vector2::zero();
  jresult = new Vector2((const Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_x_set(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_x_get(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_y_set(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_y_get(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector2(void * jarg1) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_0() {
  void * jresult ;
  Vector3 *result = 0 ;
  
  result = (Vector3 *)new Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_1(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Vector3 *)new Vector3((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_2(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Vector3 *)new Vector3((Vector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_3(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector3 *)new Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_Add__SWIG_0(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1; 
  result = ((Vector3 const *)arg1)->operator +();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_Subtract__SWIG_0(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1; 
  result = ((Vector3 const *)arg1)->operator -();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_Add__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Vector3 const *)arg1)->operator +((Vector3 const &)*arg2);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_Subtract__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Vector3 const *)arg1)->operator -((Vector3 const &)*arg2);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_Multiply(void * jarg1, float jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vector3 const *)arg1)->operator *(arg2);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_Divide(void * jarg1, float jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Vector3 const *)arg1)->operator /(arg2);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector3_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Vector3 const *)arg1)->operator ==((Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_normalise(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float)(arg1)->normalise();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_x_set(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_x_get(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_y_set(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_y_get(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_z_set(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_z_get(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector3(void * jarg1) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Right() {
  void * jresult ;
  Vector3 *result = 0 ;
  
  result = (Vector3 *) &Vec3Right();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Up() {
  void * jresult ;
  Vector3 *result = 0 ;
  
  result = (Vector3 *) &Vec3Up();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Forward() {
  void * jresult ;
  Vector3 *result = 0 ;
  
  result = (Vector3 *) &Vec3Forward();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Zero() {
  void * jresult ;
  Vector3 *result = 0 ;
  
  result = (Vector3 *) &Vec3Zero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3One() {
  void * jresult ;
  Vector3 *result = 0 ;
  
  result = (Vector3 *) &Vec3One();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3fromColor(void * jarg1) {
  void * jresult ;
  UINT arg1 ;
  UINT *argp1 ;
  Vector3 result;
  
  argp1 = (UINT *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = Vec3fromColor(arg1);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_0() {
  void * jresult ;
  Vector4 *result = 0 ;
  
  result = (Vector4 *)new Vector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_1(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Vector4 *)new Vector4((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  float arg2 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (Vector4 *)new Vector4((Vector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Vector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector4 *)new Vector4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_x_set(void * jarg1, float jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_x_get(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_y_set(void * jarg1, float jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_y_get(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_z_set(void * jarg1, float jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_z_get(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_w_set(void * jarg1, float jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_w_get(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector4(void * jarg1) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4One() {
  void * jresult ;
  Vector4 *result = 0 ;
  
  result = (Vector4 *) &Vec4One();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Zero() {
  void * jresult ;
  Vector4 *result = 0 ;
  
  result = (Vector4 *) &Vec4Zero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4fromColor(void * jarg1) {
  void * jresult ;
  UINT arg1 ;
  UINT *argp1 ;
  Vector4 result;
  
  argp1 = (UINT *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = Vec4fromColor(arg1);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_0() {
  void * jresult ;
  Matrix4x4 *result = 0 ;
  
  result = (Matrix4x4 *)new Matrix4x4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_1(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Matrix4x4 *)new Matrix4x4((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_2(void * jarg1) {
  void * jresult ;
  Matrix4x4 *arg1 = 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix4x4 const & type is null", 0);
    return 0;
  } 
  result = (Matrix4x4 *)new Matrix4x4((Matrix4x4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  result = (Matrix4x4 *)new Matrix4x4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_identity() {
  void * jresult ;
  Matrix4x4 *result = 0 ;
  
  result = (Matrix4x4 *) &Matrix4x4::identity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_GetRow(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Uint arg2 ;
  Vector3 result;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Uint)jarg2; 
  result = ((Matrix4x4 const *)arg1)->GetRow(arg2);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix4x4(void * jarg1) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_0() {
  void * jresult ;
  Quaternion *result = 0 ;
  
  result = (Quaternion *)new Quaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_1(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Quaternion *)new Quaternion((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Quaternion *)new Quaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_x_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_x_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_y_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_y_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_z_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_z_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_w_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_w_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Quaternion(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EulerAngleXYZ_x_set(void * jarg1, float jarg2) {
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  float arg2 ;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EulerAngleXYZ_x_get(void * jarg1) {
  float jresult ;
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  float result;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EulerAngleXYZ_y_set(void * jarg1, float jarg2) {
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  float arg2 ;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EulerAngleXYZ_y_get(void * jarg1) {
  float jresult ;
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  float result;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EulerAngleXYZ_z_set(void * jarg1, float jarg2) {
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  float arg2 ;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EulerAngleXYZ_z_get(void * jarg1) {
  float jresult ;
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  float result;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EulerAngleXYZ__SWIG_0() {
  void * jresult ;
  EulerAngleXYZ *result = 0 ;
  
  result = (EulerAngleXYZ *)new EulerAngleXYZ();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EulerAngleXYZ__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  EulerAngleXYZ *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (EulerAngleXYZ *)new EulerAngleXYZ(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EulerAngleXYZ_Normalize(void * jarg1) {
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  (arg1)->Normalize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EulerAngleXYZ(void * jarg1) {
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Plane__SWIG_0() {
  void * jresult ;
  Plane *result = 0 ;
  
  result = (Plane *)new Plane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Plane__SWIG_1(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Plane *)new Plane((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Plane__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Plane *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Plane *)new Plane(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Plane_a_set(void * jarg1, float jarg2) {
  Plane *arg1 = (Plane *) 0 ;
  float arg2 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Plane_a_get(void * jarg1) {
  float jresult ;
  Plane *arg1 = (Plane *) 0 ;
  float result;
  
  arg1 = (Plane *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Plane_b_set(void * jarg1, float jarg2) {
  Plane *arg1 = (Plane *) 0 ;
  float arg2 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Plane_b_get(void * jarg1) {
  float jresult ;
  Plane *arg1 = (Plane *) 0 ;
  float result;
  
  arg1 = (Plane *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Plane_c_set(void * jarg1, float jarg2) {
  Plane *arg1 = (Plane *) 0 ;
  float arg2 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Plane_c_get(void * jarg1) {
  float jresult ;
  Plane *arg1 = (Plane *) 0 ;
  float result;
  
  arg1 = (Plane *)jarg1; 
  result = (float) ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Plane_d_set(void * jarg1, float jarg2) {
  Plane *arg1 = (Plane *) 0 ;
  float arg2 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Plane_d_get(void * jarg1) {
  float jresult ;
  Plane *arg1 = (Plane *) 0 ;
  float result;
  
  arg1 = (Plane *)jarg1; 
  result = (float) ((arg1)->d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Plane(void * jarg1) {
  Plane *arg1 = (Plane *) 0 ;
  
  arg1 = (Plane *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_0() {
  void * jresult ;
  Color *result = 0 ;
  
  result = (Color *)new Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  Uint32 arg1 ;
  Color *result = 0 ;
  
  arg1 = (Uint32)jarg1; 
  result = (Color *)new Color(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_2(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Color *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Color *)new Color((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)new Color(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_r_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_r_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_g_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_g_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_b_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_b_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_a_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_a_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Color(void * jarg1) {
  Color *arg1 = (Color *) 0 ;
  
  arg1 = (Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Length(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float)Vec2Length((Vector2 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2LengthSq(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float)Vec2LengthSq((Vector2 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (float)Vec2Dot((Vector2 const *)arg1,(Vector2 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2CCW(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (float)Vec2CCW((Vector2 const *)arg1,(Vector2 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Add(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  result = (Vector2 *)Vec2Add(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Subtract(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  result = (Vector2 *)Vec2Subtract(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Minimize(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  result = (Vector2 *)Vec2Minimize(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Maximize(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  result = (Vector2 *)Vec2Maximize(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Scale(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  float arg3 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2 *)Vec2Scale(arg1,(Vector2 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  float arg4 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector2 *)Vec2Lerp(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Length(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float)Vec3Length((Vector3 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float)Vec3LengthSq((Vector3 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (float)Vec3Dot((Vector3 const *)arg1,(Vector3 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Cross(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Cross(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Add__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Add(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Subtract(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Subtract(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Minimize(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Minimize(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Maximize(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Maximize(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Scale(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector3 *)Vec3Scale(arg1,(Vector3 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Lerp(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Vector3 *)Vec3Normalize(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Normalize__SWIG_2(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Vec3Normalize((Vector3 const &)*arg1);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Transform(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix4x4 *arg3 = (Matrix4x4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix4x4 *)jarg3; 
  result = (Vector4 *)Vec3Transform(arg1,(Vector3 const *)arg2,(Matrix4x4 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3TransformCoord__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix4x4 *arg3 = (Matrix4x4 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix4x4 *)jarg3; 
  result = (Vector3 *)Vec3TransformCoord(arg1,(Vector3 const *)arg2,(Matrix4x4 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3TransformNormal__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix4x4 *arg3 = (Matrix4x4 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix4x4 *)jarg3; 
  result = (Vector3 *)Vec3TransformNormal(arg1,(Vector3 const *)arg2,(Matrix4x4 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Length(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float)Vec4Length((Vector4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4LengthSq(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float)Vec4LengthSq((Vector4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (float)Vec4Dot((Vector4 const *)arg1,(Vector4 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Add(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *arg3 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  arg3 = (Vector4 *)jarg3; 
  result = (Vector4 *)Vec4Add(arg1,(Vector4 const *)arg2,(Vector4 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Subtract(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *arg3 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  arg3 = (Vector4 *)jarg3; 
  result = (Vector4 *)Vec4Subtract(arg1,(Vector4 const *)arg2,(Vector4 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Minimize(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *arg3 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  arg3 = (Vector4 *)jarg3; 
  result = (Vector4 *)Vec4Minimize(arg1,(Vector4 const *)arg2,(Vector4 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Maximize(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *arg3 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  arg3 = (Vector4 *)jarg3; 
  result = (Vector4 *)Vec4Maximize(arg1,(Vector4 const *)arg2,(Vector4 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Scale(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  float arg3 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector4 *)Vec4Scale(arg1,(Vector4 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *arg3 = (Vector4 *) 0 ;
  float arg4 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  arg3 = (Vector4 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector4 *)Vec4Lerp(arg1,(Vector4 const *)arg2,(Vector4 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixIdentity__SWIG_0(void * jarg1) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  result = (Matrix4x4 *)MatrixIdentity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MatrixIsIdentity(void * jarg1) {
  unsigned int jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  bool result;
  
  arg1 = (Matrix4x4 *)jarg1; 
  result = (bool)MatrixIsIdentity((Matrix4x4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatrixFromEulerAngleXYZ(void * jarg1, void * jarg2) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  EulerAngleXYZ *arg2 = (EulerAngleXYZ *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (EulerAngleXYZ *)jarg2; 
  MatrixFromEulerAngleXYZ(arg1,(EulerAngleXYZ const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatrixFromQuaternion(void * jarg1, void * jarg2) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  MatrixFromQuaternion(arg1,(Quaternion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatrixAddTranslation(void * jarg1, void * jarg2) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  MatrixAddTranslation(arg1,(Vector3 const *)arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_MatrixDeterminant(void * jarg1) {
  float jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float result;
  
  arg1 = (Matrix4x4 *)jarg1; 
  result = (float)MatrixDeterminant((Matrix4x4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MatrixDecompose(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Matrix4x4 *arg4 = (Matrix4x4 *) 0 ;
  bool result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Matrix4x4 *)jarg4; 
  result = (bool)MatrixDecompose(arg1,arg2,arg3,(Matrix4x4 const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Matrix4x4 *arg2 = (Matrix4x4 *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Matrix4x4 *)jarg2; 
  result = (Matrix4x4 *)MatrixTranspose(arg1,(Matrix4x4 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixMultiply(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Matrix4x4 *arg2 = (Matrix4x4 *) 0 ;
  Matrix4x4 *arg3 = (Matrix4x4 *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Matrix4x4 *)jarg2; 
  arg3 = (Matrix4x4 *)jarg3; 
  result = (Matrix4x4 *)MatrixMultiply(arg1,(Matrix4x4 const *)arg2,(Matrix4x4 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInverse(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float *arg2 = (float *) 0 ;
  Matrix4x4 *arg3 = (Matrix4x4 *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (Matrix4x4 *)jarg3; 
  result = (Matrix4x4 *)MatrixInverse(arg1,arg2,(Matrix4x4 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScaling(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix4x4 *)MatrixScaling(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslation(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix4x4 *)MatrixTranslation(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationX(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix4x4 *)MatrixRotationX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationY(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix4x4 *)MatrixRotationY(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationZ(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix4x4 *)MatrixRotationZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationAxis(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix4x4 *)MatrixRotationAxis(arg1,(Vector3 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationQuaternion(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Matrix4x4 *)MatrixRotationQuaternion(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationYawPitchRoll(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix4x4 *)MatrixRotationYawPitchRoll(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTransformation(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Vector3 *arg5 = (Vector3 *) 0 ;
  Quaternion *arg6 = (Quaternion *) 0 ;
  Vector3 *arg7 = (Vector3 *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  arg5 = (Vector3 *)jarg5; 
  arg6 = (Quaternion *)jarg6; 
  arg7 = (Vector3 *)jarg7; 
  result = (Matrix4x4 *)MatrixTransformation(arg1,(Vector3 const *)arg2,(Quaternion const *)arg3,(Vector3 const *)arg4,(Vector3 const *)arg5,(Quaternion const *)arg6,(Vector3 const *)arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtRH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix4x4 *)MatrixLookAtRH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtLH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix4x4 *)MatrixLookAtLH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix4x4 *)MatrixPerspectiveRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix4x4 *)MatrixPerspectiveFovRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix4x4 *)MatrixPerspectiveFovLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsNaN__SWIG_0(float jarg1) {
  unsigned int jresult ;
  float arg1 ;
  bool result;
  
  arg1 = (float)jarg1; 
  result = (bool)IsNaN(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Abs(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Abs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_InvSqrt(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)InvSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clamp(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Clamp(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_QuaternionLength(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float)QuaternionLength((Quaternion const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_QuaternionLengthSq(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float)QuaternionLengthSq((Quaternion const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_QuaternionDot(void * jarg1, void * jarg2) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (float)QuaternionDot((Quaternion const *)arg1,(Quaternion const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionIdentity(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionIdentity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuaternionIsIdentity(void * jarg1) {
  unsigned int jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  bool result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (bool)QuaternionIsIdentity((Quaternion const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionConjugate(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionConjugate(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationMatrix(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Matrix4x4 *arg2 = (Matrix4x4 *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Matrix4x4 *)jarg2; 
  result = (Quaternion *)QuaternionRotationMatrix(arg1,(Matrix4x4 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationAxis(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Quaternion *)QuaternionRotationAxis(arg1,(Vector3 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionMultiply(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  result = (Quaternion *)QuaternionMultiply(arg1,(Quaternion const *)arg2,(Quaternion const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionNormalize(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionNormalize(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionInverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionInverse(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionSlerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  float arg4 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Quaternion *)QuaternionSlerp(arg1,(Quaternion const *)arg2,(Quaternion const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionFromEulerAngleXYZ(void * jarg1, void * jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  EulerAngleXYZ *arg2 = (EulerAngleXYZ *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (EulerAngleXYZ *)jarg2; 
  QuaternionFromEulerAngleXYZ(arg1,(EulerAngleXYZ const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EulerAngleXYZIdentity(void * jarg1) {
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  EulerAngleXYZIdentity(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EulerAngleFromQuaternion__SWIG_0(void * jarg1, void * jarg2) {
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  EulerAngleFromQuaternion(arg1,(Quaternion const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneFromPoints(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Plane *)PlaneFromPoints(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorNegative(void * jarg1, void * jarg2) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  result = (Color *)ColorNegative(arg1,(Color const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorAdd(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  result = (Color *)ColorAdd(arg1,(Color const *)arg2,(Color const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorSubtract(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  result = (Color *)ColorSubtract(arg1,(Color const *)arg2,(Color const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorScale(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  float arg3 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Color *)ColorScale(arg1,(Color const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorModulate(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  result = (Color *)ColorModulate(arg1,(Color const *)arg2,(Color const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorLerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)ColorLerp(arg1,(Color const *)arg2,(Color const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maGUID_m_a_set(void * jarg1, void * jarg2) {
  maGUID *arg1 = (maGUID *) 0 ;
  Uint64 arg2 ;
  Uint64 *argp2 ;
  
  arg1 = (maGUID *)jarg1; 
  argp2 = (Uint64 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Uint64", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_a = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maGUID_m_a_get(void * jarg1) {
  void * jresult ;
  maGUID *arg1 = (maGUID *) 0 ;
  Uint64 result;
  
  arg1 = (maGUID *)jarg1; 
  result =  ((arg1)->m_a);
  jresult = new Uint64((const Uint64 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maGUID_m_b_set(void * jarg1, void * jarg2) {
  maGUID *arg1 = (maGUID *) 0 ;
  Uint64 arg2 ;
  Uint64 *argp2 ;
  
  arg1 = (maGUID *)jarg1; 
  argp2 = (Uint64 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Uint64", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_b = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maGUID_m_b_get(void * jarg1) {
  void * jresult ;
  maGUID *arg1 = (maGUID *) 0 ;
  Uint64 result;
  
  arg1 = (maGUID *)jarg1; 
  result =  ((arg1)->m_b);
  jresult = new Uint64((const Uint64 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maGUID_Clear(void * jarg1) {
  maGUID *arg1 = (maGUID *) 0 ;
  
  arg1 = (maGUID *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_maGUID() {
  void * jresult ;
  maGUID *result = 0 ;
  
  result = (maGUID *)new maGUID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_maGUID(void * jarg1) {
  maGUID *arg1 = (maGUID *) 0 ;
  
  arg1 = (maGUID *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidTransform_m_vPos_set(void * jarg1, void * jarg2) {
  RigidTransform *arg1 = (RigidTransform *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (RigidTransform *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTransform_m_vPos_get(void * jarg1) {
  void * jresult ;
  RigidTransform *arg1 = (RigidTransform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (RigidTransform *)jarg1; 
  result = (Vector3 *)& ((arg1)->m_vPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidTransform_m_qRot_set(void * jarg1, void * jarg2) {
  RigidTransform *arg1 = (RigidTransform *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (RigidTransform *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  if (arg1) (arg1)->m_qRot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTransform_m_qRot_get(void * jarg1) {
  void * jresult ;
  RigidTransform *arg1 = (RigidTransform *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (RigidTransform *)jarg1; 
  result = (Quaternion *)& ((arg1)->m_qRot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidTransform() {
  void * jresult ;
  RigidTransform *result = 0 ;
  
  result = (RigidTransform *)new RigidTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RigidTransform(void * jarg1) {
  RigidTransform *arg1 = (RigidTransform *) 0 ;
  
  arg1 = (RigidTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneTransform_m_vPos_set(void * jarg1, void * jarg2) {
  BoneTransform *arg1 = (BoneTransform *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (BoneTransform *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BoneTransform_m_vPos_get(void * jarg1) {
  void * jresult ;
  BoneTransform *arg1 = (BoneTransform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (BoneTransform *)jarg1; 
  result = (Vector3 *)& ((arg1)->m_vPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneTransform_m_qRot_set(void * jarg1, void * jarg2) {
  BoneTransform *arg1 = (BoneTransform *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (BoneTransform *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  if (arg1) (arg1)->m_qRot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BoneTransform_m_qRot_get(void * jarg1) {
  void * jresult ;
  BoneTransform *arg1 = (BoneTransform *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (BoneTransform *)jarg1; 
  result = (Quaternion *)& ((arg1)->m_qRot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneTransform_m_fPropScale_set(void * jarg1, float jarg2) {
  BoneTransform *arg1 = (BoneTransform *) 0 ;
  float arg2 ;
  
  arg1 = (BoneTransform *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fPropScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BoneTransform_m_fPropScale_get(void * jarg1) {
  float jresult ;
  BoneTransform *arg1 = (BoneTransform *) 0 ;
  float result;
  
  arg1 = (BoneTransform *)jarg1; 
  result = (float) ((arg1)->m_fPropScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoneTransform() {
  void * jresult ;
  BoneTransform *result = 0 ;
  
  result = (BoneTransform *)new BoneTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BoneTransform(void * jarg1) {
  BoneTransform *arg1 = (BoneTransform *) 0 ;
  
  arg1 = (BoneTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeTransform_m_vPos_set(void * jarg1, void * jarg2) {
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (NodeTransform *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodeTransform_m_vPos_get(void * jarg1) {
  void * jresult ;
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (NodeTransform *)jarg1; 
  result = (Vector3 *)& ((arg1)->m_vPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeTransform_m_qRot_set(void * jarg1, void * jarg2) {
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (NodeTransform *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  if (arg1) (arg1)->m_qRot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodeTransform_m_qRot_get(void * jarg1) {
  void * jresult ;
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (NodeTransform *)jarg1; 
  result = (Quaternion *)& ((arg1)->m_qRot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeTransform_m_fScale_set(void * jarg1, float jarg2) {
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  float arg2 ;
  
  arg1 = (NodeTransform *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NodeTransform_m_fScale_get(void * jarg1) {
  float jresult ;
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  float result;
  
  arg1 = (NodeTransform *)jarg1; 
  result = (float) ((arg1)->m_fScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodeTransform_Identity() {
  void * jresult ;
  NodeTransform result;
  
  result = NodeTransform::Identity();
  jresult = new NodeTransform((const NodeTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodeTransform() {
  void * jresult ;
  NodeTransform *result = 0 ;
  
  result = (NodeTransform *)new NodeTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NodeTransform(void * jarg1) {
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  
  arg1 = (NodeTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Frame_m_vPos_set(void * jarg1, void * jarg2) {
  Frame *arg1 = (Frame *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Frame *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Frame_m_vPos_get(void * jarg1) {
  void * jresult ;
  Frame *arg1 = (Frame *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Frame *)jarg1; 
  result = (Vector3 *)& ((arg1)->m_vPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Frame_m_qRot_set(void * jarg1, void * jarg2) {
  Frame *arg1 = (Frame *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (Frame *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  if (arg1) (arg1)->m_qRot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Frame_m_qRot_get(void * jarg1) {
  void * jresult ;
  Frame *arg1 = (Frame *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Frame *)jarg1; 
  result = (Quaternion *)& ((arg1)->m_qRot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Frame_m_fScale_set(void * jarg1, float jarg2) {
  Frame *arg1 = (Frame *) 0 ;
  float arg2 ;
  
  arg1 = (Frame *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Frame_m_fScale_get(void * jarg1) {
  float jresult ;
  Frame *arg1 = (Frame *) 0 ;
  float result;
  
  arg1 = (Frame *)jarg1; 
  result = (float) ((arg1)->m_fScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Frame_SetIdentity(void * jarg1) {
  Frame *arg1 = (Frame *) 0 ;
  
  arg1 = (Frame *)jarg1; 
  (arg1)->SetIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Frame_Zero(void * jarg1) {
  Frame *arg1 = (Frame *) 0 ;
  
  arg1 = (Frame *)jarg1; 
  (arg1)->Zero();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Frame() {
  void * jresult ;
  Frame *result = 0 ;
  
  result = (Frame *)new Frame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Frame(void * jarg1) {
  Frame *arg1 = (Frame *) 0 ;
  
  arg1 = (Frame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  Quaternion *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion & type is null", 0);
    return ;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & type is null", 0);
    return ;
  } 
  arg3 = (Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  Lerp(*arg1,(Quaternion const &)*arg2,(Quaternion const &)*arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FloatEqual__SWIG_0(float jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)FloatEqual(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FloatEqual__SWIG_1(float jarg1, float jarg2) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)FloatEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsNaN__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  bool result;
  
  arg1 = (Matrix4x4 *)jarg1; 
  result = (bool)IsNaN(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Normalize__SWIG_0(void * jarg1, void * jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  Normalize(arg1,(Vector3 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Normalize__SWIG_1(void * jarg1, void * jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  Normalize(arg1,(Quaternion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Normalize__SWIG_2(void * jarg1, void * jarg2) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  Normalize(arg1,(float const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3PositiveX() {
  void * jresult ;
  Vector3 result;
  
  result = Vec3PositiveX();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3PositiveY() {
  void * jresult ;
  Vector3 result;
  
  result = Vec3PositiveY();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3PositiveZ() {
  void * jresult ;
  Vector3 result;
  
  result = Vec3PositiveZ();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3Recip(void * jarg1, void * jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  Vec3Recip(arg1,(Vector3 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3Add__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  Vec3Add(arg1,(Vector3 const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3Mul(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  Vec3Mul(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3Min(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  Vec3Min(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3Max(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  Vec3Max(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3Mad(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  Vec3Mad(arg1,(Vector3 const *)arg2,arg3,(Vector3 const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_S3AVecClampLength(void * jarg1, void * jarg2, float jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  S3AVecClampLength(arg1,(Vector3 const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3TransformCoord__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  RigidTransform *arg3 = (RigidTransform *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (RigidTransform *)jarg3; 
  Vec3TransformCoord(arg1,(Vector3 const *)arg2,(RigidTransform const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3TransformNormal__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  RigidTransform *arg3 = (RigidTransform *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (RigidTransform *)jarg3; 
  Vec3TransformNormal(arg1,(Vector3 const *)arg2,(RigidTransform const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3TransformCoord__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  NodeTransform *arg3 = (NodeTransform *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (NodeTransform *)jarg3; 
  Vec3TransformCoord(arg1,(Vector3 const *)arg2,(NodeTransform const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec3TransformNormal__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  NodeTransform *arg3 = (NodeTransform *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (NodeTransform *)jarg3; 
  Vec3TransformNormal(arg1,(Vector3 const *)arg2,(NodeTransform const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4SetPoint(void * jarg1, void * jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  Vec4SetPoint(arg1,(Vector3 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vec4SetVector(void * jarg1, void * jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  Vec4SetVector(arg1,(Vector3 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EulerAngleFromQuaternion__SWIG_1(void * jarg1, void * jarg2) {
  float *arg1 = (float *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  EulerAngleFromQuaternion(arg1,(Quaternion const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EulerAngleFromXToAxis(void * jarg1, void * jarg2) {
  EulerAngleXYZ *arg1 = (EulerAngleXYZ *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (EulerAngleXYZ *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  EulerAngleFromXToAxis(arg1,(Vector3 const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionIden() {
  void * jresult ;
  Quaternion result;
  
  result = QuaternionIden();
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionFromEulerAngle(void * jarg1, void * jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float *)jarg2; 
  QuaternionFromEulerAngle(arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionMad(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  float arg4 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  arg4 = (float)jarg4; 
  QuaternionMad(arg1,(Quaternion const *)arg2,(Quaternion const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionAdd(void * jarg1, void * jarg2, void * jarg3) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  QuaternionAdd(arg1,(Quaternion const *)arg2,(Quaternion const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionTransformVector(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  QuaternionTransformVector(arg1,(Vector3 const *)arg2,(Quaternion const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformQuaternion(void * jarg1, void * jarg2, void * jarg3) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Matrix4x4 *arg3 = (Matrix4x4 *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Matrix4x4 *)jarg3; 
  TransformQuaternion(arg1,(Quaternion const *)arg2,(Matrix4x4 const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionLerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  float arg4 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  arg4 = (float)jarg4; 
  QuaternionLerp(arg1,(Quaternion const *)arg2,(Quaternion const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionFromAxisToAxis__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  QuaternionFromAxisToAxis(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionFromAxisToAxis__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  QuaternionFromAxisToAxis(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionFromAxisToAxis__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  QuaternionFromAxisToAxis(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionFromAxisToAxis__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  QuaternionFromAxisToAxis(arg1,arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformSetIdentity__SWIG_0(void * jarg1) {
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  
  arg1 = (NodeTransform *)jarg1; 
  TransformSetIdentity(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformFromMatrix__SWIG_0(void * jarg1, void * jarg2) {
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  Matrix4x4 *arg2 = (Matrix4x4 *) 0 ;
  
  arg1 = (NodeTransform *)jarg1; 
  arg2 = (Matrix4x4 *)jarg2; 
  TransformFromMatrix(arg1,(Matrix4x4 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformMul__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  NodeTransform *arg2 = (NodeTransform *) 0 ;
  NodeTransform *arg3 = (NodeTransform *) 0 ;
  
  arg1 = (NodeTransform *)jarg1; 
  arg2 = (NodeTransform *)jarg2; 
  arg3 = (NodeTransform *)jarg3; 
  TransformMul(arg1,(NodeTransform const *)arg2,(NodeTransform const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformMulLocalScale(void * jarg1, void * jarg2, void * jarg3) {
  NodeTransform *arg1 = (NodeTransform *) 0 ;
  NodeTransform *arg2 = (NodeTransform *) 0 ;
  NodeTransform *arg3 = (NodeTransform *) 0 ;
  
  arg1 = (NodeTransform *)jarg1; 
  arg2 = (NodeTransform *)jarg2; 
  arg3 = (NodeTransform *)jarg3; 
  TransformMulLocalScale(arg1,(NodeTransform const *)arg2,(NodeTransform const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformSetIdentity__SWIG_1(void * jarg1) {
  RigidTransform *arg1 = (RigidTransform *) 0 ;
  
  arg1 = (RigidTransform *)jarg1; 
  TransformSetIdentity(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformFromMatrix__SWIG_1(void * jarg1, void * jarg2) {
  RigidTransform *arg1 = (RigidTransform *) 0 ;
  Matrix4x4 *arg2 = (Matrix4x4 *) 0 ;
  
  arg1 = (RigidTransform *)jarg1; 
  arg2 = (Matrix4x4 *)jarg2; 
  TransformFromMatrix(arg1,(Matrix4x4 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformInverse(void * jarg1, void * jarg2) {
  RigidTransform *arg1 = (RigidTransform *) 0 ;
  RigidTransform *arg2 = (RigidTransform *) 0 ;
  
  arg1 = (RigidTransform *)jarg1; 
  arg2 = (RigidTransform *)jarg2; 
  TransformInverse(arg1,(RigidTransform const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformMul__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  RigidTransform *arg1 = (RigidTransform *) 0 ;
  RigidTransform *arg2 = (RigidTransform *) 0 ;
  RigidTransform *arg3 = (RigidTransform *) 0 ;
  
  arg1 = (RigidTransform *)jarg1; 
  arg2 = (RigidTransform *)jarg2; 
  arg3 = (RigidTransform *)jarg3; 
  TransformMul(arg1,(RigidTransform const *)arg2,(RigidTransform const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixIdentity__SWIG_1() {
  void * jresult ;
  Matrix4x4 result;
  
  result = MatrixIdentity();
  jresult = new Matrix4x4((const Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatrixAxis(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  MatrixAxis(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatrixTransform__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  MatrixTransform(arg1,(Quaternion const *)arg2,(Vector3 const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatrixTransform__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  MatrixTransform(arg1,(Vector3 const *)arg2,(Quaternion const *)arg3,(Vector3 const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatrixFromFrame(void * jarg1, void * jarg2) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Frame *arg2 = (Frame *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Frame *)jarg2; 
  MatrixFromFrame(arg1,(Frame const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoneMatrixFromTransform(void * jarg1, void * jarg2) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  NodeTransform *arg2 = (NodeTransform *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (NodeTransform *)jarg2; 
  BoneMatrixFromTransform(arg1,(NodeTransform const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeMatrixFromTransform(void * jarg1, void * jarg2) {
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  NodeTransform *arg2 = (NodeTransform *) 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (NodeTransform *)jarg2; 
  NodeMatrixFromTransform(arg1,(NodeTransform const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixAsTranslation3__SWIG_0(void * jarg1) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  result = (Vector3 *)MatrixAsTranslation3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixAsVector3__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Uint arg2 ;
  Vector3 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Uint)jarg2; 
  result = (Vector3 *)MatrixAsVector3(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixAsVector4__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Uint arg2 ;
  Vector4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (Uint)jarg2; 
  result = (Vector4 *)MatrixAsVector4(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixAsTranslation__SWIG_0(void * jarg1) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  result = (Vector3 *)MatrixAsTranslation((Matrix4x4 const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveGL_RH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix4x4 *)MatrixPerspectiveGL_RH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovGL_RH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix4x4 *)MatrixPerspectiveFovGL_RH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveGL_LH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix4x4 *)MatrixPerspectiveGL_LH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovGL_LH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix4x4 *)MatrixPerspectiveFovGL_LH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthoGL_LH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix4x4 *)MatrixOrthoGL_LH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthoOffCenterGL_LH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  void * jresult ;
  Matrix4x4 *arg1 = (Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (Matrix4x4 *)MatrixOrthoOffCenterGL_LH(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FrameTransformPoint(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Frame *arg3 = (Frame *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Frame *)jarg3; 
  FrameTransformPoint(arg1,(Vector3 const *)arg2,(Frame const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NextPowerOfTwo(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  UINT result;
  
  arg1 = (unsigned int)jarg1; 
  result = NextPowerOfTwo(arg1);
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_m_vMin_set(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vMin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_m_vMin_get(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (Vector3 *)& ((arg1)->m_vMin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_m_vMax_set(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vMax = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_m_vMax_get(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (Vector3 *)& ((arg1)->m_vMax);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AABB__SWIG_0() {
  void * jresult ;
  ma::AABB *result = 0 ;
  
  result = (ma::AABB *)new ma::AABB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AABB__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 arg2 ;
  Vector3 const *argp2 ;
  ma::AABB *result = 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ma::AABB *)new ma::AABB((Vector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_SetNull(void * jarg1) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  (arg1)->SetNull();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_IsNull(void * jarg1) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (bool)((ma::AABB const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_Merge__SWIG_0(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->Merge((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_Merge__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  int arg3 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Merge((Vector3 const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_Merge__SWIG_2(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::AABB *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return ;
  } 
  (arg1)->Merge((ma::AABB const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_Transform(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Matrix4x4 *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (Matrix4x4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix4x4 const & type is null", 0);
    return ;
  } 
  (arg1)->Transform((Matrix4x4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_Center(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Vector3 result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = ((ma::AABB const *)arg1)->Center();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_Extent(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Vector3 result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = ((ma::AABB const *)arg1)->Extent();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_Size(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  Vector3 result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = ((ma::AABB const *)arg1)->Size();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AABB(void * jarg1) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_x_set(void * jarg1, float jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_x_get(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_y_set(void * jarg1, float jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_y_get(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_width_set(void * jarg1, float jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_width_get(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_height_set(void * jarg1, float jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_height_get(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rectangle__SWIG_0() {
  void * jresult ;
  ma::Rectangle *result = 0 ;
  
  result = (ma::Rectangle *)new ma::Rectangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rectangle__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ma::Rectangle *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ma::Rectangle *)new ma::Rectangle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rectangle__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ma::Rectangle *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ma::Rectangle *)new ma::Rectangle(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rectangle__SWIG_3(void * jarg1) {
  void * jresult ;
  ma::Rectangle *arg1 = 0 ;
  ma::Rectangle *result = 0 ;
  
  arg1 = (ma::Rectangle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return 0;
  } 
  result = (ma::Rectangle *)new ma::Rectangle((ma::Rectangle const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Rectangle(void * jarg1) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Rectangle_empty() {
  void * jresult ;
  ma::Rectangle *result = 0 ;
  
  result = (ma::Rectangle *) &ma::Rectangle::empty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_isEmpty(void * jarg1) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (bool)((ma::Rectangle const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_set__SWIG_1(void * jarg1, void * jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  ma::Rectangle *arg2 = 0 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (ma::Rectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return ;
  } 
  (arg1)->set((ma::Rectangle const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_setPosition(void * jarg1, float jarg2, float jarg3) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setPosition(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_left(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float)((ma::Rectangle const *)arg1)->left();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_top(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float)((ma::Rectangle const *)arg1)->top();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_right(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float)((ma::Rectangle const *)arg1)->right();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_bottom(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float)((ma::Rectangle const *)arg1)->bottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_contains__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)((ma::Rectangle const *)arg1)->contains(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_contains__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)((ma::Rectangle const *)arg1)->contains(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_contains__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  ma::Rectangle *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (ma::Rectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Rectangle const *)arg1)->contains((ma::Rectangle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_intersects__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)((ma::Rectangle const *)arg1)->intersects(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_intersects__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  ma::Rectangle *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (ma::Rectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Rectangle const *)arg1)->intersects((ma::Rectangle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_combine(void * jarg1, void * jarg2, void * jarg3) {
  ma::Rectangle *arg1 = 0 ;
  ma::Rectangle *arg2 = 0 ;
  ma::Rectangle *arg3 = (ma::Rectangle *) 0 ;
  
  arg1 = (ma::Rectangle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return ;
  } 
  arg2 = (ma::Rectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Rectangle *)jarg3; 
  ma::Rectangle::combine((ma::Rectangle const &)*arg1,(ma::Rectangle const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_inflate(void * jarg1, float jarg2, float jarg3) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->inflate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogListener_OnLog(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4) {
  ma::ILogListener *arg1 = (ma::ILogListener *) 0 ;
  Uint arg2 ;
  Uint arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ma::ILogListener *)jarg1; 
  arg2 = (Uint)jarg2; 
  arg3 = (Uint)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->OnLog(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILogListener(void * jarg1) {
  ma::ILogListener *arg1 = (ma::ILogListener *) 0 ;
  
  arg1 = (ma::ILogListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetLogListener(void * jarg1) {
  ma::ILogListener *arg1 = (ma::ILogListener *) 0 ;
  
  arg1 = (ma::ILogListener *)jarg1; 
  ma::SetLogListener(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log__SWIG_0(unsigned int jarg1, unsigned int jarg2, char * jarg3) {
  Uint arg1 ;
  Uint arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (Uint)jarg1; 
  arg2 = (Uint)jarg2; 
  arg3 = (char *)jarg3; 
  ma::Log(arg1,arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log__SWIG_1(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ma::Log((char const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Referenced__SWIG_0() {
  void * jresult ;
  ma::Referenced *result = 0 ;
  
  result = (ma::Referenced *)new ma::Referenced();
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Referenced__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Referenced *arg1 = 0 ;
  ma::Referenced *result = 0 ;
  
  arg1 = (ma::Referenced *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Referenced const & type is null", 0);
    return 0;
  } 
  result = (ma::Referenced *)new ma::Referenced((ma::Referenced const &)*arg1);
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Referenced(void * jarg1) {
  ma::Referenced *arg1 = (ma::Referenced *) 0 ;
  
  arg1 = (ma::Referenced *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Referenced_Ref(void * jarg1) {
  int jresult ;
  ma::Referenced *arg1 = (ma::Referenced *) 0 ;
  int result;
  
  arg1 = (ma::Referenced *)jarg1; 
  result = (int)((ma::Referenced const *)arg1)->Ref();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Referenced_Unref(void * jarg1) {
  int jresult ;
  ma::Referenced *arg1 = (ma::Referenced *) 0 ;
  int result;
  
  arg1 = (ma::Referenced *)jarg1; 
  result = (int)((ma::Referenced const *)arg1)->Unref();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Referenced_GetRefCount(void * jarg1) {
  int jresult ;
  ma::Referenced *arg1 = (ma::Referenced *) 0 ;
  int result;
  
  arg1 = (ma::Referenced *)jarg1; 
  result = (int)((ma::Referenced const *)arg1)->GetRefCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_StaticInitClass() {
  ma::Object::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_StaticShutdownClass() {
  ma::Object::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::Object::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_GetClass(void * jarg1) {
  void * jresult ;
  ma::Object *arg1 = (ma::Object *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::Object *)jarg1; 
  result = (ma::RTTIClass *)((ma::Object const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ma::Object *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ma::Object *)new ma::Object((char const *)arg1);
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_1() {
  void * jresult ;
  ma::Object *result = 0 ;
  
  result = (ma::Object *)new ma::Object();
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Object(void * jarg1) {
  ma::Object *arg1 = (ma::Object *) 0 ;
  
  arg1 = (ma::Object *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Object_GetName(void * jarg1) {
  char * jresult ;
  ma::Object *arg1 = (ma::Object *) 0 ;
  char *result = 0 ;
  
  arg1 = (ma::Object *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetName(void * jarg1, char * jarg2) {
  ma::Object *arg1 = (ma::Object *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ma::Object *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_IsA(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Object *arg1 = (ma::Object *) 0 ;
  ma::RTTIClass *arg2 = (ma::RTTIClass *) 0 ;
  bool result;
  
  arg1 = (ma::Object *)jarg1; 
  arg2 = (ma::RTTIClass *)jarg2; 
  result = (bool)((ma::Object const *)arg1)->IsA((ma::RTTIClass const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RTTIClass(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ma::RTTIClass *arg2 = (ma::RTTIClass *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ma::RTTIClass *)jarg2; 
  result = (ma::RTTIClass *)new ma::RTTIClass((char const *)arg1,(ma::RTTIClass const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RTTIClass_GetName(void * jarg1) {
  char * jresult ;
  ma::RTTIClass *arg1 = (ma::RTTIClass *) 0 ;
  char *result = 0 ;
  
  arg1 = (ma::RTTIClass *)jarg1; 
  result = (char *)((ma::RTTIClass const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RTTIClass_GetParent(void * jarg1) {
  void * jresult ;
  ma::RTTIClass *arg1 = (ma::RTTIClass *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::RTTIClass *)jarg1; 
  result = (ma::RTTIClass *)((ma::RTTIClass const *)arg1)->GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RTTIClass_IsA(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::RTTIClass *arg1 = (ma::RTTIClass *) 0 ;
  ma::RTTIClass *arg2 = (ma::RTTIClass *) 0 ;
  bool result;
  
  arg1 = (ma::RTTIClass *)jarg1; 
  arg2 = (ma::RTTIClass *)jarg2; 
  result = (bool)((ma::RTTIClass const *)arg1)->IsA((ma::RTTIClass const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RTTIClass(void * jarg1) {
  ma::RTTIClass *arg1 = (ma::RTTIClass *) 0 ;
  
  arg1 = (ma::RTTIClass *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClassManager() {
  void * jresult ;
  ma::ClassManager *result = 0 ;
  
  result = (ma::ClassManager *)new ma::ClassManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClassManager_Shutdown(void * jarg1) {
  ma::ClassManager *arg1 = (ma::ClassManager *) 0 ;
  
  arg1 = (ma::ClassManager *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClassManager_RegisterRTTIClass(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::ClassManager *arg1 = (ma::ClassManager *) 0 ;
  ma::RTTIClass *arg2 = (ma::RTTIClass *) 0 ;
  bool result;
  
  arg1 = (ma::ClassManager *)jarg1; 
  arg2 = (ma::RTTIClass *)jarg2; 
  result = (bool)(arg1)->RegisterRTTIClass(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClassManager_UnRegisterRTTIClass(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::ClassManager *arg1 = (ma::ClassManager *) 0 ;
  ma::RTTIClass *arg2 = (ma::RTTIClass *) 0 ;
  bool result;
  
  arg1 = (ma::ClassManager *)jarg1; 
  arg2 = (ma::RTTIClass *)jarg2; 
  result = (bool)(arg1)->UnRegisterRTTIClass(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClassManager_GetClassByName(void * jarg1, char * jarg2) {
  void * jresult ;
  ma::ClassManager *arg1 = (ma::ClassManager *) 0 ;
  char *arg2 = (char *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::ClassManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ma::RTTIClass *)(arg1)->GetClassByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClassManager(void * jarg1) {
  ma::ClassManager *arg1 = (ma::ClassManager *) 0 ;
  
  arg1 = (ma::ClassManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Input() {
  void * jresult ;
  ma::Input *result = 0 ;
  
  result = (ma::Input *)new ma::Input();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_Init(void * jarg1, void * jarg2) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (ma::Input *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_Shutdown(void * jarg1) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_Capture(void * jarg1) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  ((ma::Input const *)arg1)->Capture();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_IsKeyDown(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::KeyCode arg2 ;
  OIS::KeyCode *argp2 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  argp2 = (OIS::KeyCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null OIS::KeyCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((ma::Input const *)arg1)->IsKeyDown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_IsMouseButtonDown(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MouseButtonID arg2 ;
  OIS::MouseButtonID *argp2 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  argp2 = (OIS::MouseButtonID *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null OIS::MouseButtonID", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((ma::Input const *)arg1)->IsMouseButtonDown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_GetMouseState(void * jarg1) {
  void * jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MouseState *result = 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  result = (OIS::MouseState *) &((ma::Input const *)arg1)->GetMouseState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_GetMouse(void * jarg1) {
  void * jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::Mouse *result = 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  result = (OIS::Mouse *)(arg1)->GetMouse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_GetKeyboard(void * jarg1) {
  void * jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::Keyboard *result = 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  result = (OIS::Keyboard *)(arg1)->GetKeyboard();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_GetMultiTouch(void * jarg1) {
  void * jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MultiTouch *result = 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  result = (OIS::MultiTouch *)(arg1)->GetMultiTouch();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_GetTouchStateNumber(void * jarg1) {
  void * jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  UINT result;
  
  arg1 = (ma::Input *)jarg1; 
  result = ((ma::Input const *)arg1)->GetTouchStateNumber();
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_GetTouchStateByIndex(void * jarg1, int jarg2) {
  void * jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  int arg2 ;
  OIS::MultiTouchState *result = 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = (OIS::MultiTouchState *) &((ma::Input const *)arg1)->GetTouchStateByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_OnResize(void * jarg1, int jarg2, int jarg3) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->OnResize(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_keyPressed(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::KeyEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::KeyEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::KeyEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->keyPressed((OIS::KeyEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_keyReleased(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::KeyEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::KeyEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::KeyEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->keyReleased((OIS::KeyEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_mouseMoved(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MouseEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MouseEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MouseEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->mouseMoved((OIS::MouseEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_mousePressed(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MouseEvent *arg2 = 0 ;
  OIS::MouseButtonID arg3 ;
  OIS::MouseButtonID *argp3 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MouseEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MouseEvent const & type is null", 0);
    return 0;
  } 
  argp3 = (OIS::MouseButtonID *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null OIS::MouseButtonID", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->mousePressed((OIS::MouseEvent const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_mouseReleased(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MouseEvent *arg2 = 0 ;
  OIS::MouseButtonID arg3 ;
  OIS::MouseButtonID *argp3 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MouseEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MouseEvent const & type is null", 0);
    return 0;
  } 
  argp3 = (OIS::MouseButtonID *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null OIS::MouseButtonID", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->mouseReleased((OIS::MouseEvent const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_touchMoved(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MultiTouchEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MultiTouchEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MultiTouchEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->touchMoved((OIS::MultiTouchEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_touchPressed(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MultiTouchEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MultiTouchEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MultiTouchEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->touchPressed((OIS::MultiTouchEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_touchReleased(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MultiTouchEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MultiTouchEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MultiTouchEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->touchReleased((OIS::MultiTouchEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_touchCancelled(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MultiTouchEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MultiTouchEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MultiTouchEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->touchCancelled((OIS::MultiTouchEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_AddKeyListener(void * jarg1, void * jarg2) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::KeyListener *arg2 = (OIS::KeyListener *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::KeyListener *)jarg2; 
  (arg1)->AddKeyListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_AddMouseListener(void * jarg1, void * jarg2) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MouseListener *arg2 = (OIS::MouseListener *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MouseListener *)jarg2; 
  (arg1)->AddMouseListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_AddTouchListener(void * jarg1, void * jarg2) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MultiTouchListener *arg2 = (OIS::MultiTouchListener *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MultiTouchListener *)jarg2; 
  (arg1)->AddTouchListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_RemoveKeyListener(void * jarg1, void * jarg2) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::KeyListener *arg2 = (OIS::KeyListener *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::KeyListener *)jarg2; 
  (arg1)->RemoveKeyListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_RemoveMouseListener(void * jarg1, void * jarg2) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MouseListener *arg2 = (OIS::MouseListener *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MouseListener *)jarg2; 
  (arg1)->RemoveMouseListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_RemoveTouchListener(void * jarg1, void * jarg2) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  OIS::MultiTouchListener *arg2 = (OIS::MultiTouchListener *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  arg2 = (OIS::MultiTouchListener *)jarg2; 
  (arg1)->RemoveTouchListener(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_GetAndroidInputInjector(void * jarg1) {
  void * jresult ;
  ma::Input *arg1 = (ma::Input *) 0 ;
  ma::AndroidInputInjector *result = 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  result = (ma::AndroidInputInjector *)(arg1)->GetAndroidInputInjector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Input(void * jarg1) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetInput(void * jarg1) {
  ma::Input *arg1 = (ma::Input *) 0 ;
  
  arg1 = (ma::Input *)jarg1; 
  ma::SetInput(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetInput() {
  void * jresult ;
  ma::Input *result = 0 ;
  
  result = (ma::Input *)ma::GetInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Time() {
  void * jresult ;
  ma::Time *result = 0 ;
  
  result = (ma::Time *)new ma::Time();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Time(void * jarg1) {
  ma::Time *arg1 = (ma::Time *) 0 ;
  
  arg1 = (ma::Time *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_Reset(void * jarg1) {
  ma::Time *arg1 = (ma::Time *) 0 ;
  
  arg1 = (ma::Time *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_UpdateFrame(void * jarg1) {
  ma::Time *arg1 = (ma::Time *) 0 ;
  
  arg1 = (ma::Time *)jarg1; 
  (arg1)->UpdateFrame();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Time_GetMillisceonds(void * jarg1) {
  float jresult ;
  ma::Time *arg1 = (ma::Time *) 0 ;
  float result;
  
  arg1 = (ma::Time *)jarg1; 
  result = (float)((ma::Time const *)arg1)->GetMillisceonds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Time_GetFrameTotalTime(void * jarg1) {
  float jresult ;
  ma::Time *arg1 = (ma::Time *) 0 ;
  float result;
  
  arg1 = (ma::Time *)jarg1; 
  result = (float)((ma::Time const *)arg1)->GetFrameTotalTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Time_GetFrameDeltaTime(void * jarg1) {
  float jresult ;
  ma::Time *arg1 = (ma::Time *) 0 ;
  float result;
  
  arg1 = (ma::Time *)jarg1; 
  result = (float)((ma::Time const *)arg1)->GetFrameDeltaTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_Sleep(void * jarg1) {
  UINT arg1 ;
  UINT *argp1 ;
  
  argp1 = (UINT *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return ;
  }
  arg1 = *argp1; 
  ma::Time::Sleep(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetTimer() {
  void * jresult ;
  ma::Time *result = 0 ;
  
  result = (ma::Time *)ma::GetTimer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetTimer(void * jarg1) {
  ma::Time *arg1 = (ma::Time *) 0 ;
  
  arg1 = (ma::Time *)jarg1; 
  ma::SetTimer(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Stream(void * jarg1) {
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  
  arg1 = (ma::Stream *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Stream_GetName(void * jarg1) {
  char * jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  char *result = 0 ;
  
  arg1 = (ma::Stream *)jarg1; 
  result = (char *)((ma::Stream const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Stream_GetAccessMode(void * jarg1) {
  unsigned short jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  Uint16 result;
  
  arg1 = (ma::Stream *)jarg1; 
  result = (Uint16)((ma::Stream const *)arg1)->GetAccessMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stream_GetSize(void * jarg1) {
  void * jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  UINT result;
  
  arg1 = (ma::Stream *)jarg1; 
  result = ((ma::Stream const *)arg1)->GetSize();
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Stream_IsReadable(void * jarg1) {
  unsigned int jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  bool result;
  
  arg1 = (ma::Stream *)jarg1; 
  result = (bool)((ma::Stream const *)arg1)->IsReadable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Stream_IsWritable(void * jarg1) {
  unsigned int jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  bool result;
  
  arg1 = (ma::Stream *)jarg1; 
  result = (bool)((ma::Stream const *)arg1)->IsWritable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stream_Read(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  void *arg2 = (void *) 0 ;
  UINT arg3 ;
  UINT *argp3 ;
  UINT result;
  
  arg1 = (ma::Stream *)jarg1; 
  arg2 = (void *)jarg2; 
  argp3 = (UINT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->Read(arg2,arg3);
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stream_Write(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  void *arg2 = (void *) 0 ;
  UINT arg3 ;
  UINT *argp3 ;
  UINT result;
  
  arg1 = (ma::Stream *)jarg1; 
  arg2 = (void *)jarg2; 
  argp3 = (UINT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->Write((void const *)arg2,arg3);
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stream_ReadLine__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  char *arg2 = (char *) 0 ;
  UINT arg3 ;
  std::string *arg4 = 0 ;
  UINT *argp3 ;
  UINT result;
  
  arg1 = (ma::Stream *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (UINT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (std::string *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (arg1)->ReadLine(arg2,arg3,(std::string const &)*arg4);
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stream_ReadLine__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  char *arg2 = (char *) 0 ;
  UINT arg3 ;
  UINT *argp3 ;
  UINT result;
  
  arg1 = (ma::Stream *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (UINT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->ReadLine(arg2,arg3);
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Stream_Skip(void * jarg1, int jarg2) {
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  int arg2 ;
  
  arg1 = (ma::Stream *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Skip(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Stream_Seek(void * jarg1, void * jarg2) {
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  UINT arg2 ;
  UINT *argp2 ;
  
  arg1 = (ma::Stream *)jarg1; 
  argp2 = (UINT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Seek(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stream_Tell(void * jarg1) {
  void * jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  UINT result;
  
  arg1 = (ma::Stream *)jarg1; 
  result = ((ma::Stream const *)arg1)->Tell();
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Stream_Eof(void * jarg1) {
  unsigned int jresult ;
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  bool result;
  
  arg1 = (ma::Stream *)jarg1; 
  result = (bool)((ma::Stream const *)arg1)->Eof();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Stream_Close(void * jarg1) {
  ma::Stream *arg1 = (ma::Stream *) 0 ;
  
  arg1 = (ma::Stream *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileInfo_archive_set(void * jarg1, void * jarg2) {
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  ma::Archive *arg2 = (ma::Archive *) 0 ;
  
  arg1 = (ma::FileInfo *)jarg1; 
  arg2 = (ma::Archive *)jarg2; 
  if (arg1) (arg1)->archive = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInfo_archive_get(void * jarg1) {
  void * jresult ;
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  ma::Archive *result = 0 ;
  
  arg1 = (ma::FileInfo *)jarg1; 
  result = (ma::Archive *) ((arg1)->archive);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileInfo_filename_set(void * jarg1, void * jarg2) {
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  arg1 = (ma::FileInfo *)jarg1; 
  argp2 = (std::string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->filename = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInfo_filename_get(void * jarg1) {
  void * jresult ;
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  std::string result;
  
  arg1 = (ma::FileInfo *)jarg1; 
  result =  ((arg1)->filename);
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileInfo_path_set(void * jarg1, void * jarg2) {
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  arg1 = (ma::FileInfo *)jarg1; 
  argp2 = (std::string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->path = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInfo_path_get(void * jarg1) {
  void * jresult ;
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  std::string result;
  
  arg1 = (ma::FileInfo *)jarg1; 
  result =  ((arg1)->path);
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileInfo_basename_set(void * jarg1, void * jarg2) {
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  arg1 = (ma::FileInfo *)jarg1; 
  argp2 = (std::string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->basename = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInfo_basename_get(void * jarg1) {
  void * jresult ;
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  std::string result;
  
  arg1 = (ma::FileInfo *)jarg1; 
  result =  ((arg1)->basename);
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileInfo_compressedSize_set(void * jarg1, void * jarg2) {
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  UINT arg2 ;
  UINT *argp2 ;
  
  arg1 = (ma::FileInfo *)jarg1; 
  argp2 = (UINT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->compressedSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInfo_compressedSize_get(void * jarg1) {
  void * jresult ;
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  UINT result;
  
  arg1 = (ma::FileInfo *)jarg1; 
  result =  ((arg1)->compressedSize);
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileInfo_uncompressedSize_set(void * jarg1, void * jarg2) {
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  UINT arg2 ;
  UINT *argp2 ;
  
  arg1 = (ma::FileInfo *)jarg1; 
  argp2 = (UINT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->uncompressedSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInfo_uncompressedSize_get(void * jarg1) {
  void * jresult ;
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  UINT result;
  
  arg1 = (ma::FileInfo *)jarg1; 
  result =  ((arg1)->uncompressedSize);
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileInfo() {
  void * jresult ;
  ma::FileInfo *result = 0 ;
  
  result = (ma::FileInfo *)new ma::FileInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FileInfo(void * jarg1) {
  ma::FileInfo *arg1 = (ma::FileInfo *) 0 ;
  
  arg1 = (ma::FileInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_StaticInitClass() {
  ma::Resource::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_StaticShutdownClass() {
  ma::Resource::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::Resource::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_GetClass(void * jarg1) {
  void * jresult ;
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::Resource *)jarg1; 
  result = (ma::RTTIClass *)((ma::Resource const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Resource__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ma::Resource *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ma::Resource *)new ma::Resource((char const *)arg1);
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Resource__SWIG_1() {
  void * jresult ;
  ma::Resource *result = 0 ;
  
  result = (ma::Resource *)new ma::Resource();
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Resource(void * jarg1) {
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  
  arg1 = (ma::Resource *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_LoadSync(void * jarg1) {
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  
  arg1 = (ma::Resource *)jarg1; 
  (arg1)->LoadSync();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_LoadAsync(void * jarg1) {
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  
  arg1 = (ma::Resource *)jarg1; 
  (arg1)->LoadAsync();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_SaveToFile(void * jarg1, char * jarg2) {
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ma::Resource *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SaveToFile((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Resource_GetResPath(void * jarg1) {
  char * jresult ;
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  char *result = 0 ;
  
  arg1 = (ma::Resource *)jarg1; 
  result = (char *)((ma::Resource const *)arg1)->GetResPath();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_SetResPath(void * jarg1, char * jarg2) {
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ma::Resource *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetResPath((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Resource_GetResState(void * jarg1) {
  int jresult ;
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  ma::ResState result;
  
  arg1 = (ma::Resource *)jarg1; 
  result = (ma::ResState)(arg1)->GetResState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Resource_LoadFileToMemeory(void * jarg1) {
  unsigned int jresult ;
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  bool result;
  
  arg1 = (ma::Resource *)jarg1; 
  result = (bool)(arg1)->LoadFileToMemeory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Resource_CreateFromMemeory(void * jarg1) {
  unsigned int jresult ;
  ma::Resource *arg1 = (ma::Resource *) 0 ;
  bool result;
  
  arg1 = (ma::Resource *)jarg1; 
  result = (bool)(arg1)->CreateFromMemeory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Serializer(void * jarg1) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  bool *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (bool *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_1(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  bool *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (bool *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  unsigned char *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (unsigned char *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned char & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_3(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  unsigned char *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (unsigned char *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned char & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_4(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  short *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (short *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "short & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_5(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  short *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (short *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "short & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_6(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  unsigned short *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (unsigned short *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned short & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_7(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  unsigned short *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (unsigned short *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned short & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_8(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  UINT *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (UINT *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UINT & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_9(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  UINT *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (UINT *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UINT & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_10(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  int *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_11(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  int *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_12(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  unsigned long *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (unsigned long *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned long & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_13(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  unsigned long *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (unsigned long *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned long & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_14(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  long *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (long *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "long & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_15(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  long *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (long *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "long & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_16(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Uint64 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Uint64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uint64 & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_17(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Uint64 *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Uint64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uint64 & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_18(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  float *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_19(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  float *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_20(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_21(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_22(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Vector2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_23(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_24(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  maGUID *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (maGUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "maGUID & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_25(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  maGUID *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (maGUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "maGUID & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_26(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Vector3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_27(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_28(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Vector4 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_29(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Vector4 *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_30(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  float **arg2 = 0 ;
  UINT *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (float **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float *& type is null", 0);
    return ;
  } 
  arg3 = (UINT *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UINT & type is null", 0);
    return ;
  } 
  arg4 = (char *)jarg4; 
  (arg1)->Serialize(*arg2,*arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_31(void * jarg1, void * jarg2, void * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  float **arg2 = 0 ;
  UINT *arg3 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (float **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float *& type is null", 0);
    return ;
  } 
  arg3 = (UINT *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UINT & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_32(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Quaternion *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_33(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Quaternion *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_34(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Matrix4x4 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Matrix4x4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix4x4 & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_35(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Matrix4x4 *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Matrix4x4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix4x4 & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_36(void * jarg1, void * jarg2, char * jarg3) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  NodeTransform *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (NodeTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodeTransform & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Serialize__SWIG_37(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  NodeTransform *arg2 = 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (NodeTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodeTransform & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_BeginSection(void * jarg1, char * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->BeginSection((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_EndSection(void * jarg1) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  (arg1)->EndSection();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Serializer_SerializeByte__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  unsigned int jresult ;
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Uint8 **arg2 = 0 ;
  UINT arg3 ;
  char *arg4 = (char *) 0 ;
  UINT *argp3 ;
  bool result;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Uint8 **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uint8 *& type is null", 0);
    return 0;
  } 
  argp3 = (UINT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->SerializeByte(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Serializer_SerializeByte__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  Uint8 **arg2 = 0 ;
  UINT arg3 ;
  UINT *argp3 ;
  bool result;
  
  arg1 = (ma::Serializer *)jarg1; 
  arg2 = (Uint8 **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uint8 *& type is null", 0);
    return 0;
  } 
  argp3 = (UINT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->SerializeByte(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Serializer_Tell(void * jarg1) {
  void * jresult ;
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  UINT result;
  
  arg1 = (ma::Serializer *)jarg1; 
  result = (arg1)->Tell();
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Serializer_Seek(void * jarg1, void * jarg2) {
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  UINT arg2 ;
  UINT *argp2 ;
  
  arg1 = (ma::Serializer *)jarg1; 
  argp2 = (UINT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Seek(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Serializer_IsReading(void * jarg1) {
  unsigned int jresult ;
  ma::Serializer *arg1 = (ma::Serializer *) 0 ;
  bool result;
  
  arg1 = (ma::Serializer *)jarg1; 
  result = (bool)((ma::Serializer const *)arg1)->IsReading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_StaticInitClass() {
  ma::SceneNode::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_StaticShutdownClass() {
  ma::SceneNode::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::SceneNode::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetClass(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::RTTIClass *)((ma::SceneNode const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneNode(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::SceneNode *result = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (ma::SceneNode *)new ma::SceneNode(arg1);
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SceneNode(void * jarg1) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetTransform(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  NodeTransform *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (NodeTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodeTransform const & type is null", 0);
    return ;
  } 
  (arg1)->SetTransform((NodeTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetTransform(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  NodeTransform *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (NodeTransform *) &(arg1)->GetTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetWorldMatrix(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  Matrix4x4 *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (Matrix4x4 *) &(arg1)->GetWorldMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_LookAt__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->LookAt((Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_LookAt__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->LookAt((Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Translate(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->Translate((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Rotate__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Rotate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Rotate__SWIG_1(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  Quaternion *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->Rotate((Quaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_RotateYAxisLS(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->RotateYAxisLS(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_RotateZAxisLS(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->RotateZAxisLS(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_RotateXAxisLS(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->RotateXAxisLS(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetForward(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  Vector3 result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (arg1)->GetForward();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetRight(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  Vector3 result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (arg1)->GetRight();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetUp(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  Vector3 result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (arg1)->GetUp();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Forward(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Forward(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Up(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Up(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Right(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Right(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Scale(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Scale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_WorldToLocal(void * jarg1, void * jarg2, void * jarg3) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  NodeTransform *arg2 = (NodeTransform *) 0 ;
  NodeTransform *arg3 = (NodeTransform *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (NodeTransform *)jarg2; 
  arg3 = (NodeTransform *)jarg3; 
  (arg1)->WorldToLocal(arg2,(NodeTransform const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetGameObject(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::GameObject *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::GameObject *)(arg1)->GetGameObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Serialize__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Serializer *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Serializer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Serializer & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Serialize__SWIG_1(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Serializer *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Serializer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Serializer & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneNode_IsMatrixWSDirty(void * jarg1) {
  unsigned int jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  bool result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (bool)(arg1)->IsMatrixWSDirty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_StaticInitClass() {
  ma::Component::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_StaticShutdownClass() {
  ma::Component::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Component_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::Component::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Component_GetClass(void * jarg1) {
  void * jresult ;
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  result = (ma::RTTIClass *)((ma::Component const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Component(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::Component *result = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (ma::Component *)new ma::Component(arg1);
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Component(void * jarg1) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_Update(void * jarg1) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_BeginShow(void * jarg1, void * jarg2) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::Camera *arg2 = (ma::Camera *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  arg2 = (ma::Camera *)jarg2; 
  (arg1)->BeginShow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_Show(void * jarg1, void * jarg2) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::Camera *arg2 = (ma::Camera *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  arg2 = (ma::Camera *)jarg2; 
  (arg1)->Show(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_EndShow(void * jarg1, void * jarg2) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::Camera *arg2 = (ma::Camera *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  arg2 = (ma::Camera *)jarg2; 
  (arg1)->EndShow(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Component_GetGameObject(void * jarg1) {
  void * jresult ;
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::GameObject *result = 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  result = (ma::GameObject *)(arg1)->GetGameObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Component_GetSceneNode(void * jarg1) {
  void * jresult ;
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::SceneNode *result = 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  result = (ma::SceneNode *)(arg1)->GetSceneNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_Serialize__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::Serializer *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  arg2 = (ma::Serializer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Serializer & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_Serialize__SWIG_1(void * jarg1, void * jarg2) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::Serializer *arg2 = 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  arg2 = (ma::Serializer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Serializer & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_StaticInitClass() {
  ma::GameObject::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_StaticShutdownClass() {
  ma::GameObject::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::GameObject::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_GetClass(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (ma::RTTIClass *)((ma::GameObject const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameObject__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ma::GameObject *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ma::GameObject *)new ma::GameObject((char const *)arg1);
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameObject__SWIG_1() {
  void * jresult ;
  ma::GameObject *result = 0 ;
  
  result = (ma::GameObject *)new ma::GameObject();
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameObject(void * jarg1) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_Update(void * jarg1) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_BeginShow(void * jarg1, void * jarg2) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::Camera *arg2 = (ma::Camera *) 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg2 = (ma::Camera *)jarg2; 
  (arg1)->BeginShow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_Show(void * jarg1, void * jarg2, unsigned int jarg3) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::Camera *arg2 = (ma::Camera *) 0 ;
  bool arg3 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg2 = (ma::Camera *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Show(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_EndShow(void * jarg1, void * jarg2) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::Camera *arg2 = (ma::Camera *) 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg2 = (ma::Camera *)jarg2; 
  (arg1)->EndShow(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameObject_TravelScene(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::SceneVisiter *arg2 = (ma::SceneVisiter *) 0 ;
  bool result;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg2 = (ma::SceneVisiter *)jarg2; 
  result = (bool)(arg1)->TravelScene(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_GetSceneNode(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::SceneNode *result = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (ma::SceneNode *)(arg1)->GetSceneNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_GetAABBWS(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::AABB *result = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (ma::AABB *) &(arg1)->GetAABBWS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_GetComponentNumber(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  UINT result;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (arg1)->GetComponentNumber();
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_GetComponentByIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  UINT arg2 ;
  UINT *argp2 ;
  SwigValueWrapper< ma::ref_ptr< ma::Component > > result;
  
  arg1 = (ma::GameObject *)jarg1; 
  argp2 = (UINT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetComponentByIndex(arg2);
  jresult = new ma::ref_ptr< ma::Component >((const ma::ref_ptr< ma::Component > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_GetPhyscisObject(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::IPhysicsObject *result = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (ma::IPhysicsObject *)(arg1)->GetPhyscisObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_SetCullNode(void * jarg1, void * jarg2) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::CullNode *arg2 = (ma::CullNode *) 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg2 = (ma::CullNode *)jarg2; 
  (arg1)->SetCullNode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_GetCullNode(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::CullNode *result = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (ma::CullNode *)(arg1)->GetCullNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_SetCullTree(void * jarg1, void * jarg2) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::CullTree *arg2 = (ma::CullTree *) 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg2 = (ma::CullTree *)jarg2; 
  (arg1)->SetCullTree(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_GetCullTree(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::CullTree *result = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (ma::CullTree *)((ma::GameObject const *)arg1)->GetCullTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_GetParent(void * jarg1) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::GameObject *result = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  result = (ma::GameObject *)(arg1)->GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_AddChild(void * jarg1, void * jarg2) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  SwigValueWrapper< ma::ref_ptr< ma::GameObject > > arg2 ;
  ma::GameObjectPtr *argp2 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  argp2 = (ma::GameObjectPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ma::GameObjectPtr", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AddChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_RemoveChild(void * jarg1, void * jarg2) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  SwigValueWrapper< ma::ref_ptr< ma::GameObject > > arg2 ;
  ma::GameObjectPtr *argp2 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  argp2 = (ma::GameObjectPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ma::GameObjectPtr", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->RemoveChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_RemoveAllChild(void * jarg1) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  (arg1)->RemoveAllChild();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameObject_Clone(void * jarg1, char * jarg2) {
  void * jresult ;
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< ma::ref_ptr< ma::GameObject > > result;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->Clone((char const *)arg2);
  jresult = new ma::GameObjectPtr((const ma::GameObjectPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_Serialize__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::Serializer *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg2 = (ma::Serializer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Serializer & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->Serialize(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameObject_Serialize__SWIG_1(void * jarg1, void * jarg2) {
  ma::GameObject *arg1 = (ma::GameObject *) 0 ;
  ma::Serializer *arg2 = 0 ;
  
  arg1 = (ma::GameObject *)jarg1; 
  arg2 = (ma::Serializer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Serializer & type is null", 0);
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICharaControll_StaticInitClass() {
  ma::ICharaControll::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICharaControll_StaticShutdownClass() {
  ma::ICharaControll::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICharaControll_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::ICharaControll::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICharaControll_GetClass(void * jarg1) {
  void * jresult ;
  ma::ICharaControll *arg1 = (ma::ICharaControll *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::ICharaControll *)jarg1; 
  result = (ma::RTTIClass *)((ma::ICharaControll const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICharaControll_GetCollisionShape(void * jarg1) {
  void * jresult ;
  ma::ICharaControll *arg1 = (ma::ICharaControll *) 0 ;
  ma::ICapsuleCollisionShape *result = 0 ;
  
  arg1 = (ma::ICharaControll *)jarg1; 
  result = (ma::ICapsuleCollisionShape *)(arg1)->GetCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICharaControll_SetStepOffset(void * jarg1, float jarg2) {
  ma::ICharaControll *arg1 = (ma::ICharaControll *) 0 ;
  float arg2 ;
  
  arg1 = (ma::ICharaControll *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetStepOffset(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ICharaControll_GetStepOffset(void * jarg1) {
  float jresult ;
  ma::ICharaControll *arg1 = (ma::ICharaControll *) 0 ;
  float result;
  
  arg1 = (ma::ICharaControll *)jarg1; 
  result = (float)(arg1)->GetStepOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICharaControll_IsGrounded(void * jarg1) {
  unsigned int jresult ;
  ma::ICharaControll *arg1 = (ma::ICharaControll *) 0 ;
  bool result;
  
  arg1 = (ma::ICharaControll *)jarg1; 
  result = (bool)((ma::ICharaControll const *)arg1)->IsGrounded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICharaControll(void * jarg1) {
  ma::ICharaControll *arg1 = (ma::ICharaControll *) 0 ;
  
  arg1 = (ma::ICharaControll *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICollisionShape_StaticInitClass() {
  ma::ICollisionShape::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICollisionShape_StaticShutdownClass() {
  ma::ICollisionShape::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICollisionShape_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::ICollisionShape::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICollisionShape_GetClass(void * jarg1) {
  void * jresult ;
  ma::ICollisionShape *arg1 = (ma::ICollisionShape *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::ICollisionShape *)jarg1; 
  result = (ma::RTTIClass *)((ma::ICollisionShape const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICollisionShape_SetTransformLS(void * jarg1, void * jarg2) {
  ma::ICollisionShape *arg1 = (ma::ICollisionShape *) 0 ;
  NodeTransform *arg2 = 0 ;
  
  arg1 = (ma::ICollisionShape *)jarg1; 
  arg2 = (NodeTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodeTransform const & type is null", 0);
    return ;
  } 
  (arg1)->SetTransformLS((NodeTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICollisionShape_GetTransformLS(void * jarg1) {
  void * jresult ;
  ma::ICollisionShape *arg1 = (ma::ICollisionShape *) 0 ;
  NodeTransform result;
  
  arg1 = (ma::ICollisionShape *)jarg1; 
  result = (arg1)->GetTransformLS();
  jresult = new NodeTransform((const NodeTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICollisionShape(void * jarg1) {
  ma::ICollisionShape *arg1 = (ma::ICollisionShape *) 0 ;
  
  arg1 = (ma::ICollisionShape *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBoxCollisionShape_StaticInitClass() {
  ma::IBoxCollisionShape::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBoxCollisionShape_StaticShutdownClass() {
  ma::IBoxCollisionShape::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBoxCollisionShape_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::IBoxCollisionShape::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBoxCollisionShape_GetClass(void * jarg1) {
  void * jresult ;
  ma::IBoxCollisionShape *arg1 = (ma::IBoxCollisionShape *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::IBoxCollisionShape *)jarg1; 
  result = (ma::RTTIClass *)((ma::IBoxCollisionShape const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBoxCollisionShape_SetSize(void * jarg1, void * jarg2) {
  ma::IBoxCollisionShape *arg1 = (ma::IBoxCollisionShape *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ma::IBoxCollisionShape *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetSize((Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBoxCollisionShape_GetSize(void * jarg1) {
  void * jresult ;
  ma::IBoxCollisionShape *arg1 = (ma::IBoxCollisionShape *) 0 ;
  Vector3 result;
  
  arg1 = (ma::IBoxCollisionShape *)jarg1; 
  result = (arg1)->GetSize();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IBoxCollisionShape(void * jarg1) {
  ma::IBoxCollisionShape *arg1 = (ma::IBoxCollisionShape *) 0 ;
  
  arg1 = (ma::IBoxCollisionShape *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISphereCollisionShape_StaticInitClass() {
  ma::ISphereCollisionShape::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISphereCollisionShape_StaticShutdownClass() {
  ma::ISphereCollisionShape::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISphereCollisionShape_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::ISphereCollisionShape::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISphereCollisionShape_GetClass(void * jarg1) {
  void * jresult ;
  ma::ISphereCollisionShape *arg1 = (ma::ISphereCollisionShape *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::ISphereCollisionShape *)jarg1; 
  result = (ma::RTTIClass *)((ma::ISphereCollisionShape const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISphereCollisionShape_SetRadius(void * jarg1, float jarg2) {
  ma::ISphereCollisionShape *arg1 = (ma::ISphereCollisionShape *) 0 ;
  float arg2 ;
  
  arg1 = (ma::ISphereCollisionShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRadius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ISphereCollisionShape_GetRadius(void * jarg1) {
  float jresult ;
  ma::ISphereCollisionShape *arg1 = (ma::ISphereCollisionShape *) 0 ;
  float result;
  
  arg1 = (ma::ISphereCollisionShape *)jarg1; 
  result = (float)(arg1)->GetRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISphereCollisionShape(void * jarg1) {
  ma::ISphereCollisionShape *arg1 = (ma::ISphereCollisionShape *) 0 ;
  
  arg1 = (ma::ISphereCollisionShape *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICapsuleCollisionShape_StaticInitClass() {
  ma::ICapsuleCollisionShape::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICapsuleCollisionShape_StaticShutdownClass() {
  ma::ICapsuleCollisionShape::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICapsuleCollisionShape_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::ICapsuleCollisionShape::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICapsuleCollisionShape_GetClass(void * jarg1) {
  void * jresult ;
  ma::ICapsuleCollisionShape *arg1 = (ma::ICapsuleCollisionShape *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::ICapsuleCollisionShape *)jarg1; 
  result = (ma::RTTIClass *)((ma::ICapsuleCollisionShape const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICapsuleCollisionShape_SetHeight(void * jarg1, float jarg2) {
  ma::ICapsuleCollisionShape *arg1 = (ma::ICapsuleCollisionShape *) 0 ;
  float arg2 ;
  
  arg1 = (ma::ICapsuleCollisionShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHeight(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ICapsuleCollisionShape_GetHeight(void * jarg1) {
  float jresult ;
  ma::ICapsuleCollisionShape *arg1 = (ma::ICapsuleCollisionShape *) 0 ;
  float result;
  
  arg1 = (ma::ICapsuleCollisionShape *)jarg1; 
  result = (float)((ma::ICapsuleCollisionShape const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICapsuleCollisionShape_SetRadius(void * jarg1, float jarg2) {
  ma::ICapsuleCollisionShape *arg1 = (ma::ICapsuleCollisionShape *) 0 ;
  float arg2 ;
  
  arg1 = (ma::ICapsuleCollisionShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRadius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ICapsuleCollisionShape_GetRadius(void * jarg1) {
  float jresult ;
  ma::ICapsuleCollisionShape *arg1 = (ma::ICapsuleCollisionShape *) 0 ;
  float result;
  
  arg1 = (ma::ICapsuleCollisionShape *)jarg1; 
  result = (float)((ma::ICapsuleCollisionShape const *)arg1)->GetRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICapsuleCollisionShape(void * jarg1) {
  ma::ICapsuleCollisionShape *arg1 = (ma::ICapsuleCollisionShape *) 0 ;
  
  arg1 = (ma::ICapsuleCollisionShape *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Collision_m_pGameEntity_set(void * jarg1, void * jarg2) {
  ma::Collision *arg1 = (ma::Collision *) 0 ;
  ma::GameObject *arg2 = (ma::GameObject *) 0 ;
  
  arg1 = (ma::Collision *)jarg1; 
  arg2 = (ma::GameObject *)jarg2; 
  if (arg1) (arg1)->m_pGameEntity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Collision_m_pGameEntity_get(void * jarg1) {
  void * jresult ;
  ma::Collision *arg1 = (ma::Collision *) 0 ;
  ma::GameObject *result = 0 ;
  
  arg1 = (ma::Collision *)jarg1; 
  result = (ma::GameObject *) ((arg1)->m_pGameEntity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Collision_m_vContactsPointWS_set(void * jarg1, void * jarg2) {
  ma::Collision *arg1 = (ma::Collision *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (ma::Collision *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vContactsPointWS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Collision_m_vContactsPointWS_get(void * jarg1) {
  void * jresult ;
  ma::Collision *arg1 = (ma::Collision *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ma::Collision *)jarg1; 
  result = (Vector3 *)& ((arg1)->m_vContactsPointWS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Collision_m_vContactsNormalWS_set(void * jarg1, void * jarg2) {
  ma::Collision *arg1 = (ma::Collision *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (ma::Collision *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vContactsNormalWS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Collision_m_vContactsNormalWS_get(void * jarg1) {
  void * jresult ;
  ma::Collision *arg1 = (ma::Collision *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ma::Collision *)jarg1; 
  result = (Vector3 *)& ((arg1)->m_vContactsNormalWS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Collision() {
  void * jresult ;
  ma::Collision *result = 0 ;
  
  result = (ma::Collision *)new ma::Collision();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Collision(void * jarg1) {
  ma::Collision *arg1 = (ma::Collision *) 0 ;
  
  arg1 = (ma::Collision *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_Init(void * jarg1) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_ShoutDown(void * jarg1) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  (arg1)->ShoutDown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_Start(void * jarg1) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  (arg1)->Start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_Stop(void * jarg1) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  (arg1)->Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_BeginUpdate(void * jarg1) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  (arg1)->BeginUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_EndUpdate(void * jarg1) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  (arg1)->EndUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_DebugRender(void * jarg1) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  (arg1)->DebugRender();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_SetLayerCollisionMask(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned int jarg4) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  Uint8 arg2 ;
  Uint8 arg3 ;
  bool arg4 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (Uint8)jarg2; 
  arg3 = (Uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SetLayerCollisionMask(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_GetGravity(void * jarg1) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  Vector3 result;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  result = ((ma::IPhysicsSystem const *)arg1)->GetGravity();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_SetGravity(void * jarg1, void * jarg2) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetGravity((Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_CreatePhysicsObject(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::GameObject *arg2 = (ma::GameObject *) 0 ;
  ma::IPhysicsObject *result = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::GameObject *)jarg2; 
  result = (ma::IPhysicsObject *)(arg1)->CreatePhysicsObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_CreateRigidBody(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::GameObject *arg2 = (ma::GameObject *) 0 ;
  ma::IRigidBody *result = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::GameObject *)jarg2; 
  result = (ma::IRigidBody *)(arg1)->CreateRigidBody(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_CreateBoxCollisionShape(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::GameObject *arg2 = (ma::GameObject *) 0 ;
  ma::IBoxCollisionShape *result = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::GameObject *)jarg2; 
  result = (ma::IBoxCollisionShape *)(arg1)->CreateBoxCollisionShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_CreateSphereCollisionShape(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::GameObject *arg2 = (ma::GameObject *) 0 ;
  ma::ISphereCollisionShape *result = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::GameObject *)jarg2; 
  result = (ma::ISphereCollisionShape *)(arg1)->CreateSphereCollisionShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_CreateCapsuleCollisionShape(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::GameObject *arg2 = (ma::GameObject *) 0 ;
  ma::ICapsuleCollisionShape *result = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::GameObject *)jarg2; 
  result = (ma::ICapsuleCollisionShape *)(arg1)->CreateCapsuleCollisionShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_CreateCharaControll(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::GameObject *arg2 = (ma::GameObject *) 0 ;
  ma::ICharaControll *result = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::GameObject *)jarg2; 
  result = (ma::ICharaControll *)(arg1)->CreateCharaControll(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_CreatePhysicsGenericJoint(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::GameObject *arg2 = (ma::GameObject *) 0 ;
  ma::IPhysicsGenericJoint *result = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::GameObject *)jarg2; 
  result = (ma::IPhysicsGenericJoint *)(arg1)->CreatePhysicsGenericJoint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_CreatePhysicsHingeJoint(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::GameObject *arg2 = (ma::GameObject *) 0 ;
  ma::IPhysicsHingeJoint *result = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::GameObject *)jarg2; 
  result = (ma::IPhysicsHingeJoint *)(arg1)->CreatePhysicsHingeJoint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_DeletePhysicsObject(void * jarg1, void * jarg2) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::IPhysicsObject *arg2 = (ma::IPhysicsObject *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::IPhysicsObject *)jarg2; 
  (arg1)->DeletePhysicsObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_DeleteRigidBody(void * jarg1, void * jarg2) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::IRigidBody *arg2 = (ma::IRigidBody *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::IRigidBody *)jarg2; 
  (arg1)->DeleteRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_DeleteBoxCollisionShape(void * jarg1, void * jarg2) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::IBoxCollisionShape *arg2 = (ma::IBoxCollisionShape *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::IBoxCollisionShape *)jarg2; 
  (arg1)->DeleteBoxCollisionShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_DeleteSphereCollisionShape(void * jarg1, void * jarg2) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::ISphereCollisionShape *arg2 = (ma::ISphereCollisionShape *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::ISphereCollisionShape *)jarg2; 
  (arg1)->DeleteSphereCollisionShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_DeleteCapsuleCollisionShape(void * jarg1, void * jarg2) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::ICapsuleCollisionShape *arg2 = (ma::ICapsuleCollisionShape *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::ICapsuleCollisionShape *)jarg2; 
  (arg1)->DeleteCapsuleCollisionShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_DeleteCharaControll(void * jarg1, void * jarg2) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::ICharaControll *arg2 = (ma::ICharaControll *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::ICharaControll *)jarg2; 
  (arg1)->DeleteCharaControll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_DeletePhysicsGenericJoint(void * jarg1, void * jarg2) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::IPhysicsGenericJoint *arg2 = (ma::IPhysicsGenericJoint *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::IPhysicsGenericJoint *)jarg2; 
  (arg1)->DeletePhysicsGenericJoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsSystem_DeletePhysicsHingeJoint(void * jarg1, void * jarg2) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  ma::IPhysicsHingeJoint *arg2 = (ma::IPhysicsHingeJoint *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (ma::IPhysicsHingeJoint *)jarg2; 
  (arg1)->DeletePhysicsHingeJoint(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsSystem_RayCastCloseGameObj(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  int arg4 ;
  Vector3 *arg5 = 0 ;
  ma::GameObject *result = 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return 0;
  } 
  result = (ma::GameObject *)(arg1)->RayCastCloseGameObj((Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4,*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPhysicsSystem(void * jarg1) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetPhysicsSystem(void * jarg1) {
  ma::IPhysicsSystem *arg1 = (ma::IPhysicsSystem *) 0 ;
  
  arg1 = (ma::IPhysicsSystem *)jarg1; 
  ma::SetPhysicsSystem(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetPhysicsSystem() {
  void * jresult ;
  ma::IPhysicsSystem *result = 0 ;
  
  result = (ma::IPhysicsSystem *)ma::GetPhysicsSystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsObject_CreateRigidBody(void * jarg1) {
  void * jresult ;
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  ma::IRigidBody *result = 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  result = (ma::IRigidBody *)(arg1)->CreateRigidBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsObject_CreateBoxCollisionShape(void * jarg1) {
  void * jresult ;
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  ma::IBoxCollisionShape *result = 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  result = (ma::IBoxCollisionShape *)(arg1)->CreateBoxCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsObject_CreateSphereCollisionShape(void * jarg1) {
  void * jresult ;
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  ma::ISphereCollisionShape *result = 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  result = (ma::ISphereCollisionShape *)(arg1)->CreateSphereCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsObject_CreateCapsuleCollisionShape(void * jarg1) {
  void * jresult ;
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  ma::ICapsuleCollisionShape *result = 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  result = (ma::ICapsuleCollisionShape *)(arg1)->CreateCapsuleCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsObject_CreateCharaControll(void * jarg1) {
  void * jresult ;
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  ma::ICharaControll *result = 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  result = (ma::ICharaControll *)(arg1)->CreateCharaControll();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsObject_GetCollisionMaterial(void * jarg1) {
  void * jresult ;
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  ma::CollisionMaterial *result = 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  result = (ma::CollisionMaterial *)(arg1)->GetCollisionMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsObject_SetTransformWS(void * jarg1, void * jarg2) {
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  NodeTransform *arg2 = 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  arg2 = (NodeTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodeTransform const & type is null", 0);
    return ;
  } 
  (arg1)->SetTransformWS((NodeTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsObject_GetTransformWS(void * jarg1) {
  void * jresult ;
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  NodeTransform result;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  result = (arg1)->GetTransformWS();
  jresult = new NodeTransform((const NodeTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsObject_AddCollisionListener__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  ma::IPhysicsObject *arg2 = (ma::IPhysicsObject *) 0 ;
  ma::CollisionListener *arg3 = (ma::CollisionListener *) 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  arg2 = (ma::IPhysicsObject *)jarg2; 
  arg3 = (ma::CollisionListener *)jarg3; 
  (arg1)->AddCollisionListener(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsObject_AddCollisionListener__SWIG_1(void * jarg1, void * jarg2) {
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  ma::ICharaControll *arg2 = (ma::ICharaControll *) 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  arg2 = (ma::ICharaControll *)jarg2; 
  (arg1)->AddCollisionListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPhysicsObject(void * jarg1) {
  ma::IPhysicsObject *arg1 = (ma::IPhysicsObject *) 0 ;
  
  arg1 = (ma::IPhysicsObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionMaterial_m_nCollLayer_set(void * jarg1, int jarg2) {
  ma::CollisionMaterial *arg1 = (ma::CollisionMaterial *) 0 ;
  int arg2 ;
  
  arg1 = (ma::CollisionMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nCollLayer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionMaterial_m_nCollLayer_get(void * jarg1) {
  int jresult ;
  ma::CollisionMaterial *arg1 = (ma::CollisionMaterial *) 0 ;
  int result;
  
  arg1 = (ma::CollisionMaterial *)jarg1; 
  result = (int) ((arg1)->m_nCollLayer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionMaterial_m_friction_set(void * jarg1, float jarg2) {
  ma::CollisionMaterial *arg1 = (ma::CollisionMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ma::CollisionMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CollisionMaterial_m_friction_get(void * jarg1) {
  float jresult ;
  ma::CollisionMaterial *arg1 = (ma::CollisionMaterial *) 0 ;
  float result;
  
  arg1 = (ma::CollisionMaterial *)jarg1; 
  result = (float) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionMaterial_m_restitution_set(void * jarg1, float jarg2) {
  ma::CollisionMaterial *arg1 = (ma::CollisionMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ma::CollisionMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CollisionMaterial_m_restitution_get(void * jarg1) {
  float jresult ;
  ma::CollisionMaterial *arg1 = (ma::CollisionMaterial *) 0 ;
  float result;
  
  arg1 = (ma::CollisionMaterial *)jarg1; 
  result = (float) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionMaterial_m_rollingFriction_set(void * jarg1, float jarg2) {
  ma::CollisionMaterial *arg1 = (ma::CollisionMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ma::CollisionMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CollisionMaterial_m_rollingFriction_get(void * jarg1) {
  float jresult ;
  ma::CollisionMaterial *arg1 = (ma::CollisionMaterial *) 0 ;
  float result;
  
  arg1 = (ma::CollisionMaterial *)jarg1; 
  result = (float) ((arg1)->m_rollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionMaterial() {
  void * jresult ;
  ma::CollisionMaterial *result = 0 ;
  
  result = (ma::CollisionMaterial *)new ma::CollisionMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CollisionMaterial(void * jarg1) {
  ma::CollisionMaterial *arg1 = (ma::CollisionMaterial *) 0 ;
  
  arg1 = (ma::CollisionMaterial *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CollisionListener(void * jarg1) {
  ma::CollisionListener *arg1 = (ma::CollisionListener *) 0 ;
  
  arg1 = (ma::CollisionListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionListener_collisionEvent(void * jarg1, void * jarg2) {
  ma::CollisionListener *arg1 = (ma::CollisionListener *) 0 ;
  ma::CollisionListener::CollisionData *arg2 = 0 ;
  
  arg1 = (ma::CollisionListener *)jarg1; 
  arg2 = (ma::CollisionListener::CollisionData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::CollisionListener::CollisionData const & type is null", 0);
    return ;
  } 
  (arg1)->collisionEvent((ma::CollisionListener::CollisionData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRigidBody_StaticInitClass() {
  ma::IRigidBody::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRigidBody_StaticShutdownClass() {
  ma::IRigidBody::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRigidBody_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::IRigidBody::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRigidBody_GetClass(void * jarg1) {
  void * jresult ;
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  result = (ma::RTTIClass *)((ma::IRigidBody const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRigidBody_SetUseGravity(void * jarg1, unsigned int jarg2) {
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUseGravity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRigidBody_IsUseGravity(void * jarg1) {
  unsigned int jresult ;
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  bool result;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  result = (bool)(arg1)->IsUseGravity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRigidBody_IsKinematic(void * jarg1) {
  unsigned int jresult ;
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  bool result;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  result = (bool)(arg1)->IsKinematic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRigidBody_SetKinematic(void * jarg1, unsigned int jarg2) {
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetKinematic(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRigidBody_SetMass(void * jarg1, float jarg2) {
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetMass(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IRigidBody_GetMass(void * jarg1) {
  float jresult ;
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  float result;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  result = (float)(arg1)->GetMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRigidBody_SetLinearDamping(void * jarg1, float jarg2) {
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLinearDamping(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IRigidBody_GetLinearDamping(void * jarg1) {
  float jresult ;
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  float result;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  result = (float)(arg1)->GetLinearDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRigidBody_SetAngularDamping(void * jarg1, float jarg2) {
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAngularDamping(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IRigidBody_GetAngularDamping(void * jarg1) {
  float jresult ;
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  float result;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  result = (float)(arg1)->GetAngularDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRigidBody_ApplyForce(void * jarg1, void * jarg2) {
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->ApplyForce(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IRigidBody(void * jarg1) {
  ma::IRigidBody *arg1 = (ma::IRigidBody *) 0 ;
  
  arg1 = (ma::IRigidBody *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsJoint_StaticInitClass() {
  ma::IPhysicsJoint::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsJoint_StaticShutdownClass() {
  ma::IPhysicsJoint::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsJoint_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::IPhysicsJoint::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsJoint_GetClass(void * jarg1) {
  void * jresult ;
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  result = (ma::RTTIClass *)((ma::IPhysicsJoint const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IPhysicsJoint_GetBreakingImpulse(void * jarg1) {
  float jresult ;
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  float result;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  result = (float)(arg1)->GetBreakingImpulse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsJoint_SetBreakingImpulse(void * jarg1, float jarg2) {
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  float arg2 ;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetBreakingImpulse(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPhysicsJoint_IsEnabled(void * jarg1) {
  unsigned int jresult ;
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  bool result;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  result = (bool)((ma::IPhysicsJoint const *)arg1)->IsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsJoint_SetEnabled(void * jarg1, unsigned int jarg2) {
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  bool arg2 ;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsJoint_GetATransformLS(void * jarg1) {
  void * jresult ;
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  NodeTransform result;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  result = (arg1)->GetATransformLS();
  jresult = new NodeTransform((const NodeTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsJoint_SetATransformLS(void * jarg1, void * jarg2) {
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  NodeTransform *arg2 = 0 ;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  arg2 = (NodeTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodeTransform const & type is null", 0);
    return ;
  } 
  (arg1)->SetATransformLS((NodeTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsJoint_GetBTransformLS(void * jarg1) {
  void * jresult ;
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  NodeTransform result;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  result = (arg1)->GetBTransformLS();
  jresult = new NodeTransform((const NodeTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsJoint_SetBTransformLS(void * jarg1, void * jarg2) {
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  NodeTransform *arg2 = 0 ;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  arg2 = (NodeTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodeTransform const & type is null", 0);
    return ;
  } 
  (arg1)->SetBTransformLS((NodeTransform const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsJoint_SetPysicsObjectB(void * jarg1, void * jarg2) {
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  ma::IPhysicsObject *arg2 = (ma::IPhysicsObject *) 0 ;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  arg2 = (ma::IPhysicsObject *)jarg2; 
  (arg1)->SetPysicsObjectB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPhysicsJoint(void * jarg1) {
  ma::IPhysicsJoint *arg1 = (ma::IPhysicsJoint *) 0 ;
  
  arg1 = (ma::IPhysicsJoint *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsGenericJoint_StaticInitClass() {
  ma::IPhysicsGenericJoint::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsGenericJoint_StaticShutdownClass() {
  ma::IPhysicsGenericJoint::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsGenericJoint_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::IPhysicsGenericJoint::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsGenericJoint_GetClass(void * jarg1) {
  void * jresult ;
  ma::IPhysicsGenericJoint *arg1 = (ma::IPhysicsGenericJoint *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::IPhysicsGenericJoint *)jarg1; 
  result = (ma::RTTIClass *)((ma::IPhysicsGenericJoint const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsGenericJoint_SetAngularLowerLimit(void * jarg1, void * jarg2) {
  ma::IPhysicsGenericJoint *arg1 = (ma::IPhysicsGenericJoint *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ma::IPhysicsGenericJoint *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAngularLowerLimit((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsGenericJoint_SetAngularUpperLimit(void * jarg1, void * jarg2) {
  ma::IPhysicsGenericJoint *arg1 = (ma::IPhysicsGenericJoint *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ma::IPhysicsGenericJoint *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAngularUpperLimit((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsGenericJoint_SetLinearLowerLimit(void * jarg1, void * jarg2) {
  ma::IPhysicsGenericJoint *arg1 = (ma::IPhysicsGenericJoint *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ma::IPhysicsGenericJoint *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetLinearLowerLimit((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsGenericJoint_SetLinearUpperLimit(void * jarg1, void * jarg2) {
  ma::IPhysicsGenericJoint *arg1 = (ma::IPhysicsGenericJoint *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ma::IPhysicsGenericJoint *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetLinearUpperLimit((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPhysicsGenericJoint(void * jarg1) {
  ma::IPhysicsGenericJoint *arg1 = (ma::IPhysicsGenericJoint *) 0 ;
  
  arg1 = (ma::IPhysicsGenericJoint *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsHingeJoint_StaticInitClass() {
  ma::IPhysicsHingeJoint::StaticInitClass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsHingeJoint_StaticShutdownClass() {
  ma::IPhysicsHingeJoint::StaticShutdownClass();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsHingeJoint_StaticGetClass() {
  void * jresult ;
  ma::RTTIClass *result = 0 ;
  
  result = (ma::RTTIClass *)ma::IPhysicsHingeJoint::StaticGetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPhysicsHingeJoint_GetClass(void * jarg1) {
  void * jresult ;
  ma::IPhysicsHingeJoint *arg1 = (ma::IPhysicsHingeJoint *) 0 ;
  ma::RTTIClass *result = 0 ;
  
  arg1 = (ma::IPhysicsHingeJoint *)jarg1; 
  result = (ma::RTTIClass *)((ma::IPhysicsHingeJoint const *)arg1)->GetClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsHingeJoint_SetLimits__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  ma::IPhysicsHingeJoint *arg1 = (ma::IPhysicsHingeJoint *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (ma::IPhysicsHingeJoint *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetLimits(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPhysicsHingeJoint_SetLimits__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  ma::IPhysicsHingeJoint *arg1 = (ma::IPhysicsHingeJoint *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (ma::IPhysicsHingeJoint *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetLimits(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPhysicsHingeJoint(void * jarg1) {
  ma::IPhysicsHingeJoint *arg1 = (ma::IPhysicsHingeJoint *) 0 ;
  
  arg1 = (ma::IPhysicsHingeJoint *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT ma::Referenced * SWIGSTDCALL CSharp_Object_SWIGUpcast(ma::Object *jarg1) {
    return (ma::Referenced *)jarg1;
}

SWIGEXPORT ma::Referenced * SWIGSTDCALL CSharp_Stream_SWIGUpcast(ma::Stream *jarg1) {
    return (ma::Referenced *)jarg1;
}

SWIGEXPORT ma::Object * SWIGSTDCALL CSharp_Resource_SWIGUpcast(ma::Resource *jarg1) {
    return (ma::Object *)jarg1;
}

SWIGEXPORT ma::Object * SWIGSTDCALL CSharp_SceneNode_SWIGUpcast(ma::SceneNode *jarg1) {
    return (ma::Object *)jarg1;
}

SWIGEXPORT ma::Object * SWIGSTDCALL CSharp_Component_SWIGUpcast(ma::Component *jarg1) {
    return (ma::Object *)jarg1;
}

SWIGEXPORT ma::Object * SWIGSTDCALL CSharp_GameObject_SWIGUpcast(ma::GameObject *jarg1) {
    return (ma::Object *)jarg1;
}

SWIGEXPORT ma::Component * SWIGSTDCALL CSharp_ICharaControll_SWIGUpcast(ma::ICharaControll *jarg1) {
    return (ma::Component *)jarg1;
}

SWIGEXPORT ma::Component * SWIGSTDCALL CSharp_ICollisionShape_SWIGUpcast(ma::ICollisionShape *jarg1) {
    return (ma::Component *)jarg1;
}

SWIGEXPORT ma::ICollisionShape * SWIGSTDCALL CSharp_IBoxCollisionShape_SWIGUpcast(ma::IBoxCollisionShape *jarg1) {
    return (ma::ICollisionShape *)jarg1;
}

SWIGEXPORT ma::ICollisionShape * SWIGSTDCALL CSharp_ISphereCollisionShape_SWIGUpcast(ma::ISphereCollisionShape *jarg1) {
    return (ma::ICollisionShape *)jarg1;
}

SWIGEXPORT ma::ICollisionShape * SWIGSTDCALL CSharp_ICapsuleCollisionShape_SWIGUpcast(ma::ICapsuleCollisionShape *jarg1) {
    return (ma::ICollisionShape *)jarg1;
}

SWIGEXPORT ma::Component * SWIGSTDCALL CSharp_IRigidBody_SWIGUpcast(ma::IRigidBody *jarg1) {
    return (ma::Component *)jarg1;
}

SWIGEXPORT ma::Component * SWIGSTDCALL CSharp_IPhysicsJoint_SWIGUpcast(ma::IPhysicsJoint *jarg1) {
    return (ma::Component *)jarg1;
}

SWIGEXPORT ma::IPhysicsJoint * SWIGSTDCALL CSharp_IPhysicsGenericJoint_SWIGUpcast(ma::IPhysicsGenericJoint *jarg1) {
    return (ma::IPhysicsJoint *)jarg1;
}

SWIGEXPORT ma::IPhysicsJoint * SWIGSTDCALL CSharp_IPhysicsHingeJoint_SWIGUpcast(ma::IPhysicsHingeJoint *jarg1) {
    return (ma::IPhysicsJoint *)jarg1;
}

#ifdef __cplusplus
}
#endif

