/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_maEngine(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_maEngine(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_maEngine(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "Common/Module.h"



#include "Engine/Module.h"



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_NULL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogListener_LogInfo(void * jarg1, char * jarg2) {
  ma::ILogListener *arg1 = (ma::ILogListener *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ma::ILogListener *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->LogInfo((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogListener_LogError(void * jarg1, char * jarg2) {
  ma::ILogListener *arg1 = (ma::ILogListener *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ma::ILogListener *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->LogError((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogListener_LogWarning(void * jarg1, char * jarg2) {
  ma::ILogListener *arg1 = (ma::ILogListener *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ma::ILogListener *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->LogWarning((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILogListener(void * jarg1) {
  ma::ILogListener *arg1 = (ma::ILogListener *) 0 ;
  
  arg1 = (ma::ILogListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetLogListener(void * jarg1) {
  ma::ILogListener *arg1 = (ma::ILogListener *) 0 ;
  
  arg1 = (ma::ILogListener *)jarg1; 
  ma::SetLogListener(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogInfo(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ma::LogInfo((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogError(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ma::LogError((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWarning(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ma::LogWarning((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugMsg(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ma::DebugMsg((char const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Referenced__SWIG_0() {
  void * jresult ;
  ma::Referenced *result = 0 ;
  
  result = (ma::Referenced *)new ma::Referenced();
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Referenced__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Referenced *arg1 = 0 ;
  ma::Referenced *result = 0 ;
  
  arg1 = (ma::Referenced *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Referenced const & type is null", 0);
    return 0;
  } 
  result = (ma::Referenced *)new ma::Referenced((ma::Referenced const &)*arg1);
  jresult = (void *)result; 
  result->Ref();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Referenced(void * jarg1) {
  ma::Referenced *arg1 = (ma::Referenced *) 0 ;
  
  arg1 = (ma::Referenced *)jarg1; 
  arg1->Unref();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Referenced_Ref(void * jarg1) {
  int jresult ;
  ma::Referenced *arg1 = (ma::Referenced *) 0 ;
  int result;
  
  arg1 = (ma::Referenced *)jarg1; 
  result = (int)((ma::Referenced const *)arg1)->Ref();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Referenced_Unref(void * jarg1) {
  int jresult ;
  ma::Referenced *arg1 = (ma::Referenced *) 0 ;
  int result;
  
  arg1 = (ma::Referenced *)jarg1; 
  result = (int)((ma::Referenced const *)arg1)->Unref();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Referenced_GetRefCount(void * jarg1) {
  int jresult ;
  ma::Referenced *arg1 = (ma::Referenced *) 0 ;
  int result;
  
  arg1 = (ma::Referenced *)jarg1; 
  result = (int)((ma::Referenced const *)arg1)->GetRefCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DegreesToRadians(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::DegreesToRadians(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RadiansToDegrees(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::RadiansToDegrees(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Radian__SWIG_0(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::Radian *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (ma::Radian *)new ma::Radian(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Radian__SWIG_1() {
  void * jresult ;
  ma::Radian *result = 0 ;
  
  result = (ma::Radian *)new ma::Radian();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Radian__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::Degree *arg1 = 0 ;
  ma::Radian *result = 0 ;
  
  arg1 = (ma::Degree *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Degree const & type is null", 0);
    return 0;
  } 
  result = (ma::Radian *)new ma::Radian((ma::Degree const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Radian_valueDegrees(void * jarg1) {
  float jresult ;
  ma::Radian *arg1 = (ma::Radian *) 0 ;
  float result;
  
  arg1 = (ma::Radian *)jarg1; 
  result = (float)((ma::Radian const *)arg1)->valueDegrees();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Radian_valueRadians(void * jarg1) {
  float jresult ;
  ma::Radian *arg1 = (ma::Radian *) 0 ;
  float result;
  
  arg1 = (ma::Radian *)jarg1; 
  result = (float)((ma::Radian const *)arg1)->valueRadians();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Radian(void * jarg1) {
  ma::Radian *arg1 = (ma::Radian *) 0 ;
  
  arg1 = (ma::Radian *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Degree__SWIG_0(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::Degree *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (ma::Degree *)new ma::Degree(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Degree__SWIG_1() {
  void * jresult ;
  ma::Degree *result = 0 ;
  
  result = (ma::Degree *)new ma::Degree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Degree__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::Radian *arg1 = 0 ;
  ma::Degree *result = 0 ;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = (ma::Degree *)new ma::Degree((ma::Radian const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Degree_valueDegrees(void * jarg1) {
  float jresult ;
  ma::Degree *arg1 = (ma::Degree *) 0 ;
  float result;
  
  arg1 = (ma::Degree *)jarg1; 
  result = (float)((ma::Degree const *)arg1)->valueDegrees();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Degree_valueRadians(void * jarg1) {
  float jresult ;
  ma::Degree *arg1 = (ma::Degree *) 0 ;
  float result;
  
  arg1 = (ma::Degree *)jarg1; 
  result = (float)((ma::Degree const *)arg1)->valueRadians();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Degree(void * jarg1) {
  ma::Degree *arg1 = (ma::Degree *) 0 ;
  
  arg1 = (ma::Degree *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maGUID_m_a_set(void * jarg1, unsigned long long jarg2) {
  ma::maGUID *arg1 = (ma::maGUID *) 0 ;
  uint64 arg2 ;
  
  arg1 = (ma::maGUID *)jarg1; 
  arg2 = (uint64)jarg2; 
  if (arg1) (arg1)->m_a = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_maGUID_m_a_get(void * jarg1) {
  unsigned long long jresult ;
  ma::maGUID *arg1 = (ma::maGUID *) 0 ;
  uint64 result;
  
  arg1 = (ma::maGUID *)jarg1; 
  result = (uint64) ((arg1)->m_a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maGUID_m_b_set(void * jarg1, unsigned long long jarg2) {
  ma::maGUID *arg1 = (ma::maGUID *) 0 ;
  uint64 arg2 ;
  
  arg1 = (ma::maGUID *)jarg1; 
  arg2 = (uint64)jarg2; 
  if (arg1) (arg1)->m_b = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_maGUID_m_b_get(void * jarg1) {
  unsigned long long jresult ;
  ma::maGUID *arg1 = (ma::maGUID *) 0 ;
  uint64 result;
  
  arg1 = (ma::maGUID *)jarg1; 
  result = (uint64) ((arg1)->m_b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_maGUID() {
  void * jresult ;
  ma::maGUID *result = 0 ;
  
  result = (ma::maGUID *)new ma::maGUID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_maGUID(void * jarg1) {
  ma::maGUID *arg1 = (ma::maGUID *) 0 ;
  
  arg1 = (ma::maGUID *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box_left_set(void * jarg1, unsigned long jarg2) {
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t arg2 ;
  
  arg1 = (ma::Box *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Box_left_get(void * jarg1) {
  unsigned long jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t result;
  
  arg1 = (ma::Box *)jarg1; 
  result =  ((arg1)->left);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box_top_set(void * jarg1, unsigned long jarg2) {
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t arg2 ;
  
  arg1 = (ma::Box *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->top = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Box_top_get(void * jarg1) {
  unsigned long jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t result;
  
  arg1 = (ma::Box *)jarg1; 
  result =  ((arg1)->top);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box_right_set(void * jarg1, unsigned long jarg2) {
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t arg2 ;
  
  arg1 = (ma::Box *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Box_right_get(void * jarg1) {
  unsigned long jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t result;
  
  arg1 = (ma::Box *)jarg1; 
  result =  ((arg1)->right);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box_bottom_set(void * jarg1, unsigned long jarg2) {
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t arg2 ;
  
  arg1 = (ma::Box *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->bottom = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Box_bottom_get(void * jarg1) {
  unsigned long jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t result;
  
  arg1 = (ma::Box *)jarg1; 
  result =  ((arg1)->bottom);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box_front_set(void * jarg1, unsigned long jarg2) {
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t arg2 ;
  
  arg1 = (ma::Box *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->front = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Box_front_get(void * jarg1) {
  unsigned long jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t result;
  
  arg1 = (ma::Box *)jarg1; 
  result =  ((arg1)->front);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box_back_set(void * jarg1, unsigned long jarg2) {
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t arg2 ;
  
  arg1 = (ma::Box *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->back = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Box_back_get(void * jarg1) {
  unsigned long jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t result;
  
  arg1 = (ma::Box *)jarg1; 
  result =  ((arg1)->back);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box__SWIG_0() {
  void * jresult ;
  ma::Box *result = 0 ;
  
  result = (ma::Box *)new ma::Box();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box__SWIG_1(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  ma::Box *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (ma::Box *)new ma::Box(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box__SWIG_2(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  ma::Box *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (ma::Box *)new ma::Box(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box_contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  ma::Box *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Box *)jarg1; 
  arg2 = (ma::Box *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Box const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Box const *)arg1)->contains((ma::Box const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Box_getWidth(void * jarg1) {
  unsigned long jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t result;
  
  arg1 = (ma::Box *)jarg1; 
  result = ((ma::Box const *)arg1)->getWidth();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Box_getHeight(void * jarg1) {
  unsigned long jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t result;
  
  arg1 = (ma::Box *)jarg1; 
  result = ((ma::Box const *)arg1)->getHeight();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Box_getDepth(void * jarg1) {
  unsigned long jresult ;
  ma::Box *arg1 = (ma::Box *) 0 ;
  size_t result;
  
  arg1 = (ma::Box *)jarg1; 
  result = ((ma::Box const *)arg1)->getDepth();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Box(void * jarg1) {
  ma::Box *arg1 = (ma::Box *) 0 ;
  
  arg1 = (ma::Box *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Math__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ma::Math *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (ma::Math *)new ma::Math(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Math__SWIG_1() {
  void * jresult ;
  ma::Math *result = 0 ;
  
  result = (ma::Math *)new ma::Math();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Math(void * jarg1) {
  ma::Math *arg1 = (ma::Math *) 0 ;
  
  arg1 = (ma::Math *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Math_IAbs(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)ma::Math::IAbs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Math_ICeil(float jarg1) {
  int jresult ;
  float arg1 ;
  int result;
  
  arg1 = (float)jarg1; 
  result = (int)ma::Math::ICeil(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Math_IFloor(float jarg1) {
  int jresult ;
  float arg1 ;
  int result;
  
  arg1 = (float)jarg1; 
  result = (int)ma::Math::IFloor(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Math_ISign(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)ma::Math::ISign(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Abs__SWIG_0(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Abs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_Abs__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Degree *arg1 = 0 ;
  ma::Degree result;
  
  arg1 = (ma::Degree *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Degree const & type is null", 0);
    return 0;
  } 
  result = ma::Math::Abs((ma::Degree const &)*arg1);
  jresult = new ma::Degree((const ma::Degree &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_Abs__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::Radian *arg1 = 0 ;
  ma::Radian result;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = ma::Math::Abs((ma::Radian const &)*arg1);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_ACos(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::Radian result;
  
  arg1 = (float)jarg1; 
  result = ma::Math::ACos(arg1);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_ASin(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::Radian result;
  
  arg1 = (float)jarg1; 
  result = ma::Math::ASin(arg1);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_ATan(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::Radian result;
  
  arg1 = (float)jarg1; 
  result = ma::Math::ATan(arg1);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_ATan2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ma::Radian result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = ma::Math::ATan2(arg1,arg2);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Ceil(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Ceil(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_isNaN(float jarg1) {
  unsigned int jresult ;
  float arg1 ;
  bool result;
  
  arg1 = (float)jarg1; 
  result = (bool)ma::Math::isNaN(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Cos__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  ma::Radian *arg1 = 0 ;
  bool arg2 ;
  float result;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (float)ma::Math::Cos((ma::Radian const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Cos__SWIG_1(void * jarg1) {
  float jresult ;
  ma::Radian *arg1 = 0 ;
  float result;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = (float)ma::Math::Cos((ma::Radian const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Cos__SWIG_2(float jarg1, unsigned int jarg2) {
  float jresult ;
  float arg1 ;
  bool arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (float)ma::Math::Cos(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Cos__SWIG_3(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Cos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Exp(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Exp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Floor(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Floor(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Log(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Log(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_LOG2_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Math::LOG2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Log2(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Log2(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_LogN(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)ma::Math::LogN(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Pow(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)ma::Math::Pow(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Sign__SWIG_0(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Sign(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_Sign__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Radian *arg1 = 0 ;
  ma::Radian result;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = ma::Math::Sign((ma::Radian const &)*arg1);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_Sign__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::Degree *arg1 = 0 ;
  ma::Degree result;
  
  arg1 = (ma::Degree *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Degree const & type is null", 0);
    return 0;
  } 
  result = ma::Math::Sign((ma::Degree const &)*arg1);
  jresult = new ma::Degree((const ma::Degree &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Sin__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  ma::Radian *arg1 = 0 ;
  bool arg2 ;
  float result;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (float)ma::Math::Sin((ma::Radian const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Sin__SWIG_1(void * jarg1) {
  float jresult ;
  ma::Radian *arg1 = 0 ;
  float result;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = (float)ma::Math::Sin((ma::Radian const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Sin__SWIG_2(float jarg1, unsigned int jarg2) {
  float jresult ;
  float arg1 ;
  bool arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (float)ma::Math::Sin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Sin__SWIG_3(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Sin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Sqr(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Sqr(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Sqrt__SWIG_0(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Sqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_Sqrt__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Radian *arg1 = 0 ;
  ma::Radian result;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = ma::Math::Sqrt((ma::Radian const &)*arg1);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_Sqrt__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::Degree *arg1 = 0 ;
  ma::Degree result;
  
  arg1 = (ma::Degree *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Degree const & type is null", 0);
    return 0;
  } 
  result = ma::Math::Sqrt((ma::Degree const &)*arg1);
  jresult = new ma::Degree((const ma::Degree &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_InvSqrt(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::InvSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_UnitRandom() {
  float jresult ;
  float result;
  
  result = (float)ma::Math::UnitRandom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_RangeRandom(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)ma::Math::RangeRandom(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_SymmetricRandom() {
  float jresult ;
  float result;
  
  result = (float)ma::Math::SymmetricRandom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Tan__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  ma::Radian *arg1 = 0 ;
  bool arg2 ;
  float result;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (float)ma::Math::Tan((ma::Radian const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Tan__SWIG_1(void * jarg1) {
  float jresult ;
  ma::Radian *arg1 = 0 ;
  float result;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = (float)ma::Math::Tan((ma::Radian const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Tan__SWIG_2(float jarg1, unsigned int jarg2) {
  float jresult ;
  float arg1 ;
  bool arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (float)ma::Math::Tan(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_Tan__SWIG_3(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::Tan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_pointInTri2D(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ma::Vector2 *arg1 = 0 ;
  ma::Vector2 *arg2 = 0 ;
  ma::Vector2 *arg3 = 0 ;
  ma::Vector2 *arg4 = 0 ;
  bool result;
  
  arg1 = (ma::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)ma::Math::pointInTri2D((ma::Vector2 const &)*arg1,(ma::Vector2 const &)*arg2,(ma::Vector2 const &)*arg3,(ma::Vector2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_pointInTri3D(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  ma::Vector3 *arg5 = 0 ;
  bool result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (ma::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)ma::Math::pointInTri3D((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4,(ma::Vector3 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Plane *arg2 = 0 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return 0;
  } 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::Plane const &)*arg2);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Sphere *arg2 = 0 ;
  bool arg3 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Sphere const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::Sphere const &)*arg2,arg3);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Sphere *arg2 = 0 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Sphere const & type is null", 0);
    return 0;
  } 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::Sphere const &)*arg2);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::AABB *arg2 = 0 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::AABB const &)*arg2);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_intersects__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ma::Ray *arg1 = 0 ;
  ma::AABB *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  result = (bool)ma::Math::intersects((ma::Ray const &)*arg1,(ma::AABB const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  ma::Vector3 *arg5 = 0 ;
  bool arg6 ;
  bool arg7 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (ma::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4,(ma::Vector3 const &)*arg5,arg6,arg7);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  ma::Vector3 *arg5 = 0 ;
  bool arg6 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (ma::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4,(ma::Vector3 const &)*arg5,arg6);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  ma::Vector3 *arg5 = 0 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (ma::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4,(ma::Vector3 const &)*arg5);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_8(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4,arg5,arg6);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_9(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  bool arg5 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4,arg5);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_10(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_intersects__SWIG_11(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Sphere *arg1 = 0 ;
  ma::AABB *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Sphere *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Sphere const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = (bool)ma::Math::intersects((ma::Sphere const &)*arg1,(ma::AABB const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_intersects__SWIG_12(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Plane *arg1 = 0 ;
  ma::AABB *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Plane *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = (bool)ma::Math::intersects((ma::Plane const &)*arg1,(ma::AABB const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_13(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  vector< ma::Plane > *arg2 = 0 ;
  bool arg3 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (vector< ma::Plane > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vector< ma::Plane > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(vector< ma::Plane > const &)*arg2,arg3);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_intersects__SWIG_14(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ma::Ray *arg1 = 0 ;
  list< ma::Plane > *arg2 = 0 ;
  bool arg3 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (list< ma::Plane > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "list< ma::Plane > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ma::Math::intersects((ma::Ray const &)*arg1,(list< ma::Plane > const &)*arg2,arg3);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_intersects__SWIG_15(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Sphere *arg1 = 0 ;
  ma::Plane *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Sphere *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Sphere const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return 0;
  } 
  result = (bool)ma::Math::intersects((ma::Sphere const &)*arg1,(ma::Plane const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_RealEqual__SWIG_0(float jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ma::Math::RealEqual(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_RealEqual__SWIG_1(float jarg1, float jarg2) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)ma::Math::RealEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_calculateTangentSpaceVector(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = ma::Math::calculateTangentSpaceVector((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_buildReflectionMatrix(void * jarg1) {
  void * jresult ;
  ma::Plane *arg1 = 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Plane *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return 0;
  } 
  result = ma::Math::buildReflectionMatrix((ma::Plane const &)*arg1);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_calculateFaceNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector4 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Math::calculateFaceNormal((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = new ma::Vector4((const ma::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_calculateBasicFaceNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Math::calculateBasicFaceNormal((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_calculateFaceNormalWithoutNormalize(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector4 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Math::calculateFaceNormalWithoutNormalize((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = new ma::Vector4((const ma::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_calculateBasicFaceNormalWithoutNormalize(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Math::calculateBasicFaceNormalWithoutNormalize((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_gaussianDistribution__SWIG_0(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)ma::Math::gaussianDistribution(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_gaussianDistribution__SWIG_1(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)ma::Math::gaussianDistribution(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_gaussianDistribution__SWIG_2(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)ma::Math::gaussianDistribution(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_NextPowerOfTwo(void * jarg1) {
  void * jresult ;
  UINT arg1 ;
  UINT *argp1 ;
  UINT result;
  
  argp1 = (UINT *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = ma::Math::NextPowerOfTwo(arg1);
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_makeViewMatrix__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Matrix4 *arg3 = (ma::Matrix4 *) 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Matrix4 *)jarg3; 
  result = ma::Math::makeViewMatrix((ma::Vector3 const &)*arg1,(ma::Quaternion const &)*arg2,(ma::Matrix4 const *)arg3);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_makeViewMatrix__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  result = ma::Math::makeViewMatrix((ma::Vector3 const &)*arg1,(ma::Quaternion const &)*arg2);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_boundingRadiusFromAABB(void * jarg1) {
  float jresult ;
  ma::AABB *arg1 = 0 ;
  float result;
  
  arg1 = (ma::AABB *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = (float)ma::Math::boundingRadiusFromAABB((ma::AABB const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_MakeLookAtMatrixLH(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Math::MakeLookAtMatrixLH((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Math_MakeLookAtMatrixRH(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Math::MakeLookAtMatrixRH((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Sphere *arg1 = 0 ;
  ma::AABB *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Sphere *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Sphere const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = (bool)ma::Math::Contains((ma::Sphere const &)*arg1,(ma::AABB const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Math_Intersects(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  ma::Ray *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (ma::Ray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Ray const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)ma::Math::Intersects((ma::Ray const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_POS_INFINITY_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Math::POS_INFINITY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_NEG_INFINITY_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Math::NEG_INFINITY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_PI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Math::PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_TWO_PI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Math::TWO_PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_HALF_PI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Math::HALF_PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_FEPS_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Math::FEPS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Math_FMAX_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Math::FMAX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_MIN_INT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ma::M_MIN_INT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_MAX_INT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ma::M_MAX_INT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M_MIN_UNSIGNED_get() {
  void * jresult ;
  UINT result;
  
  result = (UINT)ma::M_MIN_UNSIGNED;
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M_MAX_UNSIGNED_get() {
  void * jresult ;
  UINT result;
  
  result = (UINT)ma::M_MAX_UNSIGNED;
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AABB__SWIG_0() {
  void * jresult ;
  ma::AABB *result = 0 ;
  
  result = (ma::AABB *)new ma::AABB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AABB__SWIG_1(int jarg1) {
  void * jresult ;
  ma::AABB::Extent arg1 ;
  ma::AABB *result = 0 ;
  
  arg1 = (ma::AABB::Extent)jarg1; 
  result = (ma::AABB *)new ma::AABB(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AABB__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = 0 ;
  ma::AABB *result = 0 ;
  
  arg1 = (ma::AABB *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = (ma::AABB *)new ma::AABB((ma::AABB const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AABB__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::AABB *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::AABB *)new ma::AABB((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AABB__SWIG_4(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  ma::AABB *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (ma::AABB *)new ma::AABB(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AABB(void * jarg1) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_getMinimum__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (ma::Vector3 *) &((ma::AABB const *)arg1)->getMinimum();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_getMaximum__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (ma::Vector3 *) &((ma::AABB const *)arg1)->getMaximum();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMinimum__SWIG_0(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setMinimum((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMinimum__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setMinimum(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMinimumX(void * jarg1, float jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float arg2 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMinimumX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMinimumY(void * jarg1, float jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float arg2 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMinimumY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMinimumZ(void * jarg1, float jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float arg2 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMinimumZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMaximum__SWIG_0(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setMaximum((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMaximum__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setMaximum(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMaximumX(void * jarg1, float jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float arg2 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMaximumX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMaximumY(void * jarg1, float jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float arg2 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMaximumY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setMaximumZ(void * jarg1, float jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float arg2 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMaximumZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setExtents__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setExtents((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setExtents__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->setExtents(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_getAllCorners(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (ma::Vector3 *)((ma::AABB const *)arg1)->getAllCorners();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_getCorner(void * jarg1, int jarg2) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::AABB::CornerEnum arg2 ;
  ma::Vector3 result;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::AABB::CornerEnum)jarg2; 
  result = ((ma::AABB const *)arg1)->getCorner(arg2);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_merge__SWIG_0(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::AABB *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return ;
  } 
  (arg1)->merge((ma::AABB const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_merge__SWIG_1(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->merge((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_transform(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Matrix4 *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix4 const & type is null", 0);
    return ;
  } 
  (arg1)->transform((ma::Matrix4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_transformAffine(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Matrix4 *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix4 const & type is null", 0);
    return ;
  } 
  (arg1)->transformAffine((ma::Matrix4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setNull(void * jarg1) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  (arg1)->setNull();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_isNull(void * jarg1) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (bool)((ma::AABB const *)arg1)->isNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_isFinite(void * jarg1) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (bool)((ma::AABB const *)arg1)->isFinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_setInfinite(void * jarg1) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  (arg1)->setInfinite();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_isInfinite(void * jarg1) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (bool)((ma::AABB const *)arg1)->isInfinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_intersects__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::AABB *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::AABB const *)arg1)->intersects((ma::AABB const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_intersection(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::AABB *arg2 = 0 ;
  ma::AABB result;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = ((ma::AABB const *)arg1)->intersection((ma::AABB const &)*arg2);
  jresult = new ma::AABB((const ma::AABB &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AABB_volume(void * jarg1) {
  float jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  float result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = (float)((ma::AABB const *)arg1)->volume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AABB_scale(void * jarg1, void * jarg2) {
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->scale((ma::Vector3 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_intersects__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Sphere *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Sphere const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::AABB const *)arg1)->intersects((ma::Sphere const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_intersects__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Plane *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::AABB const *)arg1)->intersects((ma::Plane const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_intersects__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::AABB const *)arg1)->intersects((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_getCenter(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = ((ma::AABB const *)arg1)->getCenter();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_getSize(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = ((ma::AABB const *)arg1)->getSize();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_getHalfSize(void * jarg1) {
  void * jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::AABB *)jarg1; 
  result = ((ma::AABB const *)arg1)->getHalfSize();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_contains__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::AABB const *)arg1)->contains((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AABB_contains__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::AABB *arg1 = (ma::AABB *) 0 ;
  ma::AABB *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::AABB *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::AABB const *)arg1)->contains((ma::AABB const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_BOX_NULL_get() {
  void * jresult ;
  ma::AABB *result = 0 ;
  
  result = (ma::AABB *)&ma::AABB::BOX_NULL;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AABB_BOX_INFINITE_get() {
  void * jresult ;
  ma::AABB *result = 0 ;
  
  result = (ma::AABB *)&ma::AABB::BOX_INFINITE;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OGRE_ENDIAN_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OGRE_ENDIAN_BIG_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColourValue_ZERO_get() {
  void * jresult ;
  ma::ColourValue *result = 0 ;
  
  result = (ma::ColourValue *)&ma::ColourValue::ZERO;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColourValue_Black_get() {
  void * jresult ;
  ma::ColourValue *result = 0 ;
  
  result = (ma::ColourValue *)&ma::ColourValue::Black;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColourValue_White_get() {
  void * jresult ;
  ma::ColourValue *result = 0 ;
  
  result = (ma::ColourValue *)&ma::ColourValue::White;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColourValue_Red_get() {
  void * jresult ;
  ma::ColourValue *result = 0 ;
  
  result = (ma::ColourValue *)&ma::ColourValue::Red;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColourValue_Green_get() {
  void * jresult ;
  ma::ColourValue *result = 0 ;
  
  result = (ma::ColourValue *)&ma::ColourValue::Green;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColourValue_Blue_get() {
  void * jresult ;
  ma::ColourValue *result = 0 ;
  
  result = (ma::ColourValue *)&ma::ColourValue::Blue;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColourValue__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ma::ColourValue *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ma::ColourValue *)new ma::ColourValue(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColourValue__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ma::ColourValue *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (ma::ColourValue *)new ma::ColourValue(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColourValue__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ma::ColourValue *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ma::ColourValue *)new ma::ColourValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColourValue__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::ColourValue *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (ma::ColourValue *)new ma::ColourValue(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColourValue__SWIG_4() {
  void * jresult ;
  ma::ColourValue *result = 0 ;
  
  result = (ma::ColourValue *)new ma::ColourValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_r_set(void * jarg1, float jarg2) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float arg2 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColourValue_r_get(void * jarg1) {
  float jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float result;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_g_set(void * jarg1, float jarg2) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float arg2 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColourValue_g_get(void * jarg1) {
  float jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float result;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_b_set(void * jarg1, float jarg2) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float arg2 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColourValue_b_get(void * jarg1) {
  float jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float result;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_a_set(void * jarg1, float jarg2) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float arg2 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColourValue_a_get(void * jarg1) {
  float jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float result;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColourValue_getAsRGBA(void * jarg1) {
  unsigned int jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  ma::RGBA result;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = (ma::RGBA)((ma::ColourValue const *)arg1)->getAsRGBA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColourValue_getAsARGB(void * jarg1) {
  unsigned int jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  ma::ARGB result;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = (ma::ARGB)((ma::ColourValue const *)arg1)->getAsARGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColourValue_getAsBGRA(void * jarg1) {
  unsigned int jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  ma::BGRA result;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = (ma::BGRA)((ma::ColourValue const *)arg1)->getAsBGRA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColourValue_getAsABGR(void * jarg1) {
  unsigned int jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  ma::ABGR result;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = (ma::ABGR)((ma::ColourValue const *)arg1)->getAsABGR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_setAsRGBA(void * jarg1, unsigned int jarg2) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  ma::RGBA arg2 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (ma::RGBA)jarg2; 
  (arg1)->setAsRGBA(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_setAsARGB(void * jarg1, unsigned int jarg2) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  ma::ARGB arg2 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (ma::ARGB)jarg2; 
  (arg1)->setAsARGB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_setAsBGRA(void * jarg1, unsigned int jarg2) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  ma::BGRA arg2 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (ma::BGRA)jarg2; 
  (arg1)->setAsBGRA(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_setAsABGR(void * jarg1, unsigned int jarg2) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  ma::ABGR arg2 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (ma::ABGR)jarg2; 
  (arg1)->setAsABGR(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_saturate(void * jarg1) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  (arg1)->saturate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColourValue_saturateCopy(void * jarg1) {
  void * jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  ma::ColourValue result;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = ((ma::ColourValue const *)arg1)->saturateCopy();
  jresult = new ma::ColourValue((const ma::ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColourValue_ptr__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float *result = 0 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  result = (float *)(arg1)->ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_setHSB(void * jarg1, float jarg2, float jarg3, float jarg4) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setHSB(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_getHSB(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  ((ma::ColourValue const *)arg1)->getHSB(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColourValue(void * jarg1) {
  ma::ColourValue *arg1 = (ma::ColourValue *) 0 ;
  
  arg1 = (ma::ColourValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Polygon__SWIG_0() {
  void * jresult ;
  ma::Polygon *result = 0 ;
  
  result = (ma::Polygon *)new ma::Polygon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Polygon(void * jarg1) {
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Polygon__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Polygon *arg1 = 0 ;
  ma::Polygon *result = 0 ;
  
  arg1 = (ma::Polygon *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Polygon const & type is null", 0);
    return 0;
  } 
  result = (ma::Polygon *)new ma::Polygon((ma::Polygon const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon_insertVertex__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  size_t arg3 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->insertVertex((ma::Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon_insertVertex__SWIG_1(void * jarg1, void * jarg2) {
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->insertVertex((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon_getVertex(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  size_t arg2 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ma::Vector3 *) &((ma::Polygon const *)arg1)->getVertex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon_setVertex(void * jarg1, void * jarg2, unsigned long jarg3) {
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  size_t arg3 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->setVertex((ma::Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon_removeDuplicates(void * jarg1) {
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  (arg1)->removeDuplicates();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Polygon_getVertexCount(void * jarg1) {
  unsigned long jresult ;
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  size_t result;
  
  arg1 = (ma::Polygon *)jarg1; 
  result = ((ma::Polygon const *)arg1)->getVertexCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon_getNormal(void * jarg1) {
  void * jresult ;
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  result = (ma::Vector3 *) &((ma::Polygon const *)arg1)->getNormal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon_deleteVertex(void * jarg1, unsigned long jarg2) {
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  size_t arg2 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->deleteVertex(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Polygon_isPointInside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Polygon *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Polygon const *)arg1)->isPointInside((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon_storeEdges(void * jarg1, void * jarg2) {
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  ma::Polygon::EdgeMap *arg2 = (ma::Polygon::EdgeMap *) 0 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  arg2 = (ma::Polygon::EdgeMap *)jarg2; 
  ((ma::Polygon const *)arg1)->storeEdges(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon_reset(void * jarg1) {
  ma::Polygon *arg1 = (ma::Polygon *) 0 ;
  
  arg1 = (ma::Polygon *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvexBody__SWIG_0() {
  void * jresult ;
  ma::ConvexBody *result = 0 ;
  
  result = (ma::ConvexBody *)new ma::ConvexBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConvexBody(void * jarg1) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvexBody__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::ConvexBody *arg1 = 0 ;
  ma::ConvexBody *result = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::ConvexBody const & type is null", 0);
    return 0;
  } 
  result = (ma::ConvexBody *)new ma::ConvexBody((ma::ConvexBody const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_define__SWIG_0(void * jarg1, void * jarg2) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  ma::Frustum *arg2 = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (ma::Frustum *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Frustum const & type is null", 0);
    return ;
  } 
  (arg1)->define((ma::Frustum const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_define__SWIG_1(void * jarg1, void * jarg2) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  ma::AABB *arg2 = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return ;
  } 
  (arg1)->define((ma::AABB const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_clip__SWIG_0(void * jarg1, void * jarg2) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  ma::AABB *arg2 = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return ;
  } 
  (arg1)->clip((ma::AABB const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_clip__SWIG_1(void * jarg1, void * jarg2) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  ma::ConvexBody *arg2 = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (ma::ConvexBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::ConvexBody const & type is null", 0);
    return ;
  } 
  (arg1)->clip((ma::ConvexBody const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_clip__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  ma::Plane *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (ma::Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->clip((ma::Plane const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_clip__SWIG_3(void * jarg1, void * jarg2) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  ma::Plane *arg2 = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (ma::Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return ;
  } 
  (arg1)->clip((ma::Plane const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_extend(void * jarg1, void * jarg2) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->extend((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_transformed(void * jarg1, void * jarg2) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  ma::Matrix4 arg2 ;
  ma::Matrix4 *argp2 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  argp2 = (ma::Matrix4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ma::Matrix4", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->transformed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_reset(void * jarg1) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ConvexBody_getPolygonCount(void * jarg1) {
  unsigned long jresult ;
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  size_t result;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  result = ((ma::ConvexBody const *)arg1)->getPolygonCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ConvexBody_getVertexCount(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  size_t arg2 ;
  size_t result;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((ma::ConvexBody const *)arg1)->getVertexCount(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexBody_getPolygon(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  size_t arg2 ;
  ma::Polygon *result = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ma::Polygon *) &((ma::ConvexBody const *)arg1)->getPolygon(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexBody_getVertex(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (ma::Vector3 *) &((ma::ConvexBody const *)arg1)->getVertex(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexBody_getNormal(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  size_t arg2 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ma::Vector3 *) &(arg1)->getNormal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexBody_getAABB(void * jarg1) {
  void * jresult ;
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  ma::AABB result;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  result = ((ma::ConvexBody const *)arg1)->getAABB();
  jresult = new ma::AABB((const ma::AABB &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConvexBody_hasClosedHull(void * jarg1) {
  unsigned int jresult ;
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  bool result;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  result = (bool)((ma::ConvexBody const *)arg1)->hasClosedHull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_mergePolygons(void * jarg1) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  (arg1)->mergePolygons();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody_logInfo(void * jarg1) {
  ma::ConvexBody *arg1 = (ma::ConvexBody *) 0 ;
  
  arg1 = (ma::ConvexBody *)jarg1; 
  ((ma::ConvexBody const *)arg1)->logInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody__initialisePool() {
  ma::ConvexBody::_initialisePool();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexBody__destroyPool() {
  ma::ConvexBody::_destroyPool();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix3__SWIG_0() {
  void * jresult ;
  ma::Matrix3 *result = 0 ;
  
  result = (ma::Matrix3 *)new ma::Matrix3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix3__SWIG_1(void * jarg1) {
  void * jresult ;
  float (*arg1)[3] ;
  ma::Matrix3 *result = 0 ;
  
  arg1 = (float (*)[3])jarg1; 
  result = (ma::Matrix3 *)new ma::Matrix3((float const (*)[3])arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix3__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::Matrix3 *arg1 = 0 ;
  ma::Matrix3 *result = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Matrix3 *)new ma::Matrix3((ma::Matrix3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix3__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  ma::Matrix3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = (ma::Matrix3 *)new ma::Matrix3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_swap(void * jarg1, void * jarg2) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Matrix3 *arg2 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix3_GetColumn(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  size_t arg2 ;
  ma::Vector3 result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((ma::Matrix3 const *)arg1)->GetColumn(arg2);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_SetColumn(void * jarg1, unsigned long jarg2, void * jarg3) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  size_t arg2 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetColumn(arg2,(ma::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_FromAxes(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->FromAxes((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix3_Transpose(void * jarg1) {
  void * jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Matrix3 result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  result = ((ma::Matrix3 const *)arg1)->Transpose();
  jresult = new ma::Matrix3((const ma::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix3_Inverse__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Matrix3 *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)((ma::Matrix3 const *)arg1)->Inverse(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix3_Inverse__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Matrix3 *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Matrix3 const *)arg1)->Inverse(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix3_Inverse__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  float arg2 ;
  ma::Matrix3 result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((ma::Matrix3 const *)arg1)->Inverse(arg2);
  jresult = new ma::Matrix3((const ma::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix3_Inverse__SWIG_3(void * jarg1) {
  void * jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Matrix3 result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  result = ((ma::Matrix3 const *)arg1)->Inverse();
  jresult = new ma::Matrix3((const ma::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix3_Determinant(void * jarg1) {
  float jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  float result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  result = (float)((ma::Matrix3 const *)arg1)->Determinant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_SingularValueDecomposition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Matrix3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Matrix3 *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  arg4 = (ma::Matrix3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 & type is null", 0);
    return ;
  } 
  ((ma::Matrix3 const *)arg1)->SingularValueDecomposition(*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_SingularValueComposition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Matrix3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Matrix3 *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Matrix3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 const & type is null", 0);
    return ;
  } 
  (arg1)->SingularValueComposition((ma::Matrix3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Matrix3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_Orthonormalize(void * jarg1) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  (arg1)->Orthonormalize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_QDUDecomposition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Matrix3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  ((ma::Matrix3 const *)arg1)->QDUDecomposition(*arg2,*arg3,*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix3_SpectralNorm(void * jarg1) {
  float jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  float result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  result = (float)((ma::Matrix3 const *)arg1)->SpectralNorm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_ToAxisAngle__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return ;
  } 
  ((ma::Matrix3 const *)arg1)->ToAxisAngle(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_ToAxisAngle__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Degree *arg3 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  arg3 = (ma::Degree *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Degree & type is null", 0);
    return ;
  } 
  ((ma::Matrix3 const *)arg1)->ToAxisAngle(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_FromAxisAngle(void * jarg1, void * jarg2, void * jarg3) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  (arg1)->FromAxisAngle((ma::Vector3 const &)*arg2,(ma::Radian const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix3_ToEulerAnglesXYZ(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  bool result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Matrix3 const *)arg1)->ToEulerAnglesXYZ(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix3_ToEulerAnglesXZY(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  bool result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Matrix3 const *)arg1)->ToEulerAnglesXZY(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix3_ToEulerAnglesYXZ(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  bool result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Matrix3 const *)arg1)->ToEulerAnglesYXZ(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix3_ToEulerAnglesYZX(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  bool result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Matrix3 const *)arg1)->ToEulerAnglesYZX(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix3_ToEulerAnglesZXY(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  bool result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Matrix3 const *)arg1)->ToEulerAnglesZXY(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix3_ToEulerAnglesZYX(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  bool result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Matrix3 const *)arg1)->ToEulerAnglesZYX(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_FromEulerAnglesXYZ(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  (arg1)->FromEulerAnglesXYZ((ma::Radian const &)*arg2,(ma::Radian const &)*arg3,(ma::Radian const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_FromEulerAnglesXZY(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  (arg1)->FromEulerAnglesXZY((ma::Radian const &)*arg2,(ma::Radian const &)*arg3,(ma::Radian const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_FromEulerAnglesYXZ(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  (arg1)->FromEulerAnglesYXZ((ma::Radian const &)*arg2,(ma::Radian const &)*arg3,(ma::Radian const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_FromEulerAnglesYZX(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  (arg1)->FromEulerAnglesYZX((ma::Radian const &)*arg2,(ma::Radian const &)*arg3,(ma::Radian const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_FromEulerAnglesZXY(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  (arg1)->FromEulerAnglesZXY((ma::Radian const &)*arg2,(ma::Radian const &)*arg3,(ma::Radian const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_FromEulerAnglesZYX(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  ma::Radian *arg4 = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Radian *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  (arg1)->FromEulerAnglesZYX((ma::Radian const &)*arg2,(ma::Radian const &)*arg3,(ma::Radian const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_EigenSolveSymmetric(void * jarg1, void * jarg2, void * jarg3) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  float *arg2 ;
  ma::Vector3 *arg3 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (ma::Vector3 *)jarg3; 
  ((ma::Matrix3 const *)arg1)->EigenSolveSymmetric(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix3_TensorProduct(void * jarg1, void * jarg2, void * jarg3) {
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Matrix3 *arg3 = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Matrix3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 & type is null", 0);
    return ;
  } 
  ma::Matrix3::TensorProduct((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix3_hasScale(void * jarg1) {
  unsigned int jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  bool result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  result = (bool)((ma::Matrix3 const *)arg1)->hasScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix3_Scaled(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Matrix3 result;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Matrix3 const *)arg1)->Scaled((ma::Vector3 const &)*arg2);
  jresult = new ma::Matrix3((const ma::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix3_EPSILON_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Matrix3::EPSILON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix3_ZERO_get() {
  void * jresult ;
  ma::Matrix3 *result = 0 ;
  
  result = (ma::Matrix3 *)&ma::Matrix3::ZERO;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix3_IDENTITY_get() {
  void * jresult ;
  ma::Matrix3 *result = 0 ;
  
  result = (ma::Matrix3 *)&ma::Matrix3::IDENTITY;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix3(void * jarg1) {
  ma::Matrix3 *arg1 = (ma::Matrix3 *) 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4__SWIG_0() {
  void * jresult ;
  ma::Matrix4 *result = 0 ;
  
  result = (ma::Matrix4 *)new ma::Matrix4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  ma::Matrix4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  result = (ma::Matrix4 *)new ma::Matrix4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::Matrix3 *arg1 = 0 ;
  ma::Matrix4 *result = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Matrix4 *)new ma::Matrix4((ma::Matrix3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4__SWIG_3(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = 0 ;
  ma::Matrix4 *result = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  result = (ma::Matrix4 *)new ma::Matrix4((ma::Quaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4_swap(void * jarg1, void * jarg2) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Matrix4 *arg2 = 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix4 & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_concatenate(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Matrix4 *arg2 = 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix4 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Matrix4 const *)arg1)->concatenate((ma::Matrix4 const &)*arg2);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_transpose(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = ((ma::Matrix4 const *)arg1)->transpose();
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4_setTrans(void * jarg1, void * jarg2) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setTrans((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_getTrans__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = ((ma::Matrix4 const *)arg1)->getTrans();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_getXAxis(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = ((ma::Matrix4 const *)arg1)->getXAxis();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_getYAxis(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = ((ma::Matrix4 const *)arg1)->getYAxis();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_getZAxis(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = ((ma::Matrix4 const *)arg1)->getZAxis();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4_makeTrans__SWIG_0(void * jarg1, void * jarg2) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->makeTrans((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4_makeTrans__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->makeTrans(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_getTrans__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Matrix4::getTrans((ma::Vector3 const &)*arg1);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_getTrans__SWIG_2(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ma::Matrix4 result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = ma::Matrix4::getTrans(arg1,arg2,arg3);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4_setScale(void * jarg1, void * jarg2) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setScale((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_getScale__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ma::Matrix4::getScale((ma::Vector3 const &)*arg1);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_getScale__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ma::Matrix4 result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = ma::Matrix4::getScale(arg1,arg2,arg3);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4_extract3x3Matrix(void * jarg1, void * jarg2) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Matrix3 *arg2 = 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 & type is null", 0);
    return ;
  } 
  ((ma::Matrix4 const *)arg1)->extract3x3Matrix(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix4_hasScale(void * jarg1) {
  unsigned int jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  bool result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = (bool)((ma::Matrix4 const *)arg1)->hasScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix4_hasNegativeScale(void * jarg1) {
  unsigned int jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  bool result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = (bool)((ma::Matrix4 const *)arg1)->hasNegativeScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_extractQuaternion(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Quaternion result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = ((ma::Matrix4 const *)arg1)->extractQuaternion();
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_ZERO_get() {
  void * jresult ;
  ma::Matrix4 *result = 0 ;
  
  result = (ma::Matrix4 *)&ma::Matrix4::ZERO;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_IDENTITY_get() {
  void * jresult ;
  ma::Matrix4 *result = 0 ;
  
  result = (ma::Matrix4 *)&ma::Matrix4::IDENTITY;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_CLIPSPACE2DTOIMAGESPACE_get() {
  void * jresult ;
  ma::Matrix4 *result = 0 ;
  
  result = (ma::Matrix4 *)&ma::Matrix4::CLIPSPACE2DTOIMAGESPACE;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_adjoint(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = ((ma::Matrix4 const *)arg1)->adjoint();
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4_determinant(void * jarg1) {
  float jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  float result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = (float)((ma::Matrix4 const *)arg1)->determinant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_inverse(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = ((ma::Matrix4 const *)arg1)->inverse();
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4_makeTransform(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Quaternion *arg4 = 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Quaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->makeTransform((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Quaternion const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4_makeInverseTransform(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Quaternion *arg4 = 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Quaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->makeInverseTransform((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Quaternion const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4_decomposition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Quaternion *arg4 = 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  arg4 = (ma::Quaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion & type is null", 0);
    return ;
  } 
  ((ma::Matrix4 const *)arg1)->decomposition(*arg2,*arg3,*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Matrix4_isAffine(void * jarg1) {
  unsigned int jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  bool result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = (bool)((ma::Matrix4 const *)arg1)->isAffine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_inverseAffine(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  result = ((ma::Matrix4 const *)arg1)->inverseAffine();
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_concatenateAffine(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Matrix4 *arg2 = 0 ;
  ma::Matrix4 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix4 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Matrix4 const *)arg1)->concatenateAffine((ma::Matrix4 const &)*arg2);
  jresult = new ma::Matrix4((const ma::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_transformAffine__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Matrix4 const *)arg1)->transformAffine((ma::Vector3 const &)*arg2);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4_transformAffine__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Vector4 *arg2 = 0 ;
  ma::Vector4 result;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector4 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Matrix4 const *)arg1)->transformAffine((ma::Vector4 const &)*arg2);
  jresult = new ma::Vector4((const ma::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix4(void * jarg1) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Plane__SWIG_0() {
  void * jresult ;
  ma::Plane *result = 0 ;
  
  result = (ma::Plane *)new ma::Plane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Plane__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Plane *arg1 = 0 ;
  ma::Plane *result = 0 ;
  
  arg1 = (ma::Plane *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return 0;
  } 
  result = (ma::Plane *)new ma::Plane((ma::Plane const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Plane__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  float arg2 ;
  ma::Plane *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (ma::Plane *)new ma::Plane((ma::Vector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Plane__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ma::Plane *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ma::Plane *)new ma::Plane(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Plane__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Plane *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Plane *)new ma::Plane((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Plane__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Plane *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Plane *)new ma::Plane((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Plane_getSide__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Plane::Side result;
  
  arg1 = (ma::Plane *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Plane::Side)((ma::Plane const *)arg1)->getSide((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Plane_getSide__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  ma::AABB *arg2 = 0 ;
  ma::Plane::Side result;
  
  arg1 = (ma::Plane *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = (ma::Plane::Side)((ma::Plane const *)arg1)->getSide((ma::AABB const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Plane_getSide__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Plane::Side result;
  
  arg1 = (ma::Plane *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Plane::Side)((ma::Plane const *)arg1)->getSide((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Plane_getDistance(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Plane *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Plane const *)arg1)->getDistance((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Plane_redefine__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  
  arg1 = (ma::Plane *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->redefine((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Plane_redefine__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::Plane *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->redefine((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Plane_projectVector(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Plane *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Plane const *)arg1)->projectVector((ma::Vector3 const &)*arg2);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Plane_normalise(void * jarg1) {
  float jresult ;
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  float result;
  
  arg1 = (ma::Plane *)jarg1; 
  result = (float)(arg1)->normalise();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Plane_normal_set(void * jarg1, void * jarg2) {
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  ma::Vector3 *arg2 = (ma::Vector3 *) 0 ;
  
  arg1 = (ma::Plane *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2; 
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Plane_normal_get(void * jarg1) {
  void * jresult ;
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::Plane *)jarg1; 
  result = (ma::Vector3 *)& ((arg1)->normal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Plane_d_set(void * jarg1, float jarg2) {
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Plane *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Plane_d_get(void * jarg1) {
  float jresult ;
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  float result;
  
  arg1 = (ma::Plane *)jarg1; 
  result = (float) ((arg1)->d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Plane(void * jarg1) {
  ma::Plane *arg1 = (ma::Plane *) 0 ;
  
  arg1 = (ma::Plane *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ma::Quaternion *)new ma::Quaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (ma::Quaternion *)new ma::Quaternion(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ma::Quaternion *)new ma::Quaternion(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (ma::Quaternion *)new ma::Quaternion(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_4() {
  void * jresult ;
  ma::Quaternion *result = 0 ;
  
  result = (ma::Quaternion *)new ma::Quaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_5(void * jarg1) {
  void * jresult ;
  ma::Matrix3 *arg1 = 0 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (ma::Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Quaternion *)new ma::Quaternion((ma::Matrix3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Radian *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (ma::Radian *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Quaternion *)new ma::Quaternion((ma::Radian const &)*arg1,(ma::Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Quaternion *)new ma::Quaternion((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_8(void * jarg1) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (ma::Quaternion *)new ma::Quaternion((ma::Vector3 const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_9(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (ma::Quaternion *)new ma::Quaternion(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_swap(void * jarg1, void * jarg2) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Quaternion *arg2 = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_ptr__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float *result = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = (float *)(arg1)->ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_FromRotationMatrix(void * jarg1, void * jarg2) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Matrix3 *arg2 = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 const & type is null", 0);
    return ;
  } 
  (arg1)->FromRotationMatrix((ma::Matrix3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_ToRotationMatrix(void * jarg1, void * jarg2) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Matrix3 *arg2 = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix3 & type is null", 0);
    return ;
  } 
  ((ma::Quaternion const *)arg1)->ToRotationMatrix(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_FromAngleAxis(void * jarg1, void * jarg2, void * jarg3) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->FromAngleAxis((ma::Radian const &)*arg2,(ma::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_ToAngleAxis__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  ((ma::Quaternion const *)arg1)->ToAngleAxis(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_ToAngleAxis__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Degree *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Degree *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Degree & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  ((ma::Quaternion const *)arg1)->ToAngleAxis(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_FromAxes__SWIG_0(void * jarg1, void * jarg2) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Vector3 *arg2 = (ma::Vector3 *) 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2; 
  (arg1)->FromAxes((ma::Vector3 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_FromAxes__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->FromAxes((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3,(ma::Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_ToAxes__SWIG_0(void * jarg1, void * jarg2) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Vector3 *arg2 = (ma::Vector3 *) 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2; 
  ((ma::Quaternion const *)arg1)->ToAxes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_ToAxes__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 *arg4 = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  arg4 = (ma::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  ((ma::Quaternion const *)arg1)->ToAxes(*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_xAxis(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->xAxis();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_yAxis(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->yAxis();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_zAxis(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->zAxis();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_Dot(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Quaternion *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Quaternion const *)arg1)->Dot((ma::Quaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_Norm(void * jarg1) {
  float jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = (float)((ma::Quaternion const *)arg1)->Norm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_normalise(void * jarg1) {
  float jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = (float)(arg1)->normalise();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_Inverse(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Quaternion result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->Inverse();
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_UnitInverse(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Quaternion result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->UnitInverse();
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_Exp(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Quaternion result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->Exp();
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_Log(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Quaternion result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->Log();
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_getRoll__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  bool arg2 ;
  ma::Radian result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((ma::Quaternion const *)arg1)->getRoll(arg2);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_getRoll__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Radian result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->getRoll();
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_getPitch__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  bool arg2 ;
  ma::Radian result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((ma::Quaternion const *)arg1)->getPitch(arg2);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_getPitch__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Radian result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->getPitch();
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_getYaw__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  bool arg2 ;
  ma::Radian result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((ma::Quaternion const *)arg1)->getYaw(arg2);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_getYaw__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Radian result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = ((ma::Quaternion const *)arg1)->getYaw();
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Quaternion_equals(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  bool result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Quaternion const *)arg1)->equals((ma::Quaternion const &)*arg2,(ma::Radian const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_Slerp__SWIG_0(float jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  float arg1 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Quaternion *arg3 = 0 ;
  bool arg4 ;
  ma::Quaternion result;
  
  arg1 = (float)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ma::Quaternion::Slerp(arg1,(ma::Quaternion const &)*arg2,(ma::Quaternion const &)*arg3,arg4);
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_Slerp__SWIG_1(float jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  float arg1 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Quaternion *arg3 = 0 ;
  ma::Quaternion result;
  
  arg1 = (float)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  result = ma::Quaternion::Slerp(arg1,(ma::Quaternion const &)*arg2,(ma::Quaternion const &)*arg3);
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_SlerpExtraSpins(float jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  float arg1 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Quaternion *arg3 = 0 ;
  int arg4 ;
  ma::Quaternion result;
  
  arg1 = (float)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = ma::Quaternion::SlerpExtraSpins(arg1,(ma::Quaternion const &)*arg2,(ma::Quaternion const &)*arg3,arg4);
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_Intermediate(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  ma::Quaternion *arg1 = 0 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Quaternion *arg3 = 0 ;
  ma::Quaternion *arg4 = 0 ;
  ma::Quaternion *arg5 = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  arg4 = (ma::Quaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion & type is null", 0);
    return ;
  } 
  arg5 = (ma::Quaternion *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion & type is null", 0);
    return ;
  } 
  ma::Quaternion::Intermediate((ma::Quaternion const &)*arg1,(ma::Quaternion const &)*arg2,(ma::Quaternion const &)*arg3,*arg4,*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_Squad__SWIG_0(float jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  void * jresult ;
  float arg1 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Quaternion *arg3 = 0 ;
  ma::Quaternion *arg4 = 0 ;
  ma::Quaternion *arg5 = 0 ;
  bool arg6 ;
  ma::Quaternion result;
  
  arg1 = (float)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Quaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg5 = (ma::Quaternion *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  result = ma::Quaternion::Squad(arg1,(ma::Quaternion const &)*arg2,(ma::Quaternion const &)*arg3,(ma::Quaternion const &)*arg4,(ma::Quaternion const &)*arg5,arg6);
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_Squad__SWIG_1(float jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  float arg1 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Quaternion *arg3 = 0 ;
  ma::Quaternion *arg4 = 0 ;
  ma::Quaternion *arg5 = 0 ;
  ma::Quaternion result;
  
  arg1 = (float)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg4 = (ma::Quaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg5 = (ma::Quaternion *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  result = ma::Quaternion::Squad(arg1,(ma::Quaternion const &)*arg2,(ma::Quaternion const &)*arg3,(ma::Quaternion const &)*arg4,(ma::Quaternion const &)*arg5);
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_nlerp__SWIG_0(float jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  float arg1 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Quaternion *arg3 = 0 ;
  bool arg4 ;
  ma::Quaternion result;
  
  arg1 = (float)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ma::Quaternion::nlerp(arg1,(ma::Quaternion const &)*arg2,(ma::Quaternion const &)*arg3,arg4);
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_nlerp__SWIG_1(float jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  float arg1 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Quaternion *arg3 = 0 ;
  ma::Quaternion result;
  
  arg1 = (float)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  result = ma::Quaternion::nlerp(arg1,(ma::Quaternion const &)*arg2,(ma::Quaternion const &)*arg3);
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_ms_fEpsilon_get() {
  float jresult ;
  float result;
  
  result = (float)(float)ma::Quaternion::ms_fEpsilon;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_ZERO_get() {
  void * jresult ;
  ma::Quaternion *result = 0 ;
  
  result = (ma::Quaternion *)&ma::Quaternion::ZERO;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_IDENTITY_get() {
  void * jresult ;
  ma::Quaternion *result = 0 ;
  
  result = (ma::Quaternion *)&ma::Quaternion::IDENTITY;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_w_set(void * jarg1, float jarg2) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_w_get(void * jarg1) {
  float jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_x_set(void * jarg1, float jarg2) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_x_get(void * jarg1) {
  float jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_y_set(void * jarg1, float jarg2) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_y_get(void * jarg1) {
  float jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_z_set(void * jarg1, float jarg2) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_z_get(void * jarg1) {
  float jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  float result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Quaternion_isNaN(void * jarg1) {
  unsigned int jresult ;
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  bool result;
  
  arg1 = (ma::Quaternion *)jarg1; 
  result = (bool)((ma::Quaternion const *)arg1)->isNaN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Quaternion(void * jarg1) {
  ma::Quaternion *arg1 = (ma::Quaternion *) 0 ;
  
  arg1 = (ma::Quaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ray__SWIG_0() {
  void * jresult ;
  ma::Ray *result = 0 ;
  
  result = (ma::Ray *)new ma::Ray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ray__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Ray *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Ray *)new ma::Ray((ma::Vector3 const &)*arg1,(ma::Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ray_setOrigin(void * jarg1, void * jarg2) {
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Ray *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setOrigin((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_getOrigin(void * jarg1) {
  void * jresult ;
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::Ray *)jarg1; 
  result = (ma::Vector3 *) &((ma::Ray const *)arg1)->getOrigin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ray_setDirection(void * jarg1, void * jarg2) {
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Ray *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setDirection((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_getDirection(void * jarg1) {
  void * jresult ;
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::Ray *)jarg1; 
  result = (ma::Vector3 *) &((ma::Ray const *)arg1)->getDirection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_getPoint(void * jarg1, float jarg2) {
  void * jresult ;
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  float arg2 ;
  ma::Vector3 result;
  
  arg1 = (ma::Ray *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((ma::Ray const *)arg1)->getPoint(arg2);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_intersects__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  ma::Plane *arg2 = 0 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1; 
  arg2 = (ma::Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return 0;
  } 
  result = ((ma::Ray const *)arg1)->intersects((ma::Plane const &)*arg2);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_intersects__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  ma::PlaneBoundedVolume *arg2 = 0 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1; 
  arg2 = (ma::PlaneBoundedVolume *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::PlaneBoundedVolume const & type is null", 0);
    return 0;
  } 
  result = ((ma::Ray const *)arg1)->intersects((ma::PlaneBoundedVolume const &)*arg2);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_intersects__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  ma::Sphere *arg2 = 0 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1; 
  arg2 = (ma::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Sphere const & type is null", 0);
    return 0;
  } 
  result = ((ma::Ray const *)arg1)->intersects((ma::Sphere const &)*arg2);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ray_intersects__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  ma::AABB *arg2 = 0 ;
  std::pair< bool,float > result;
  
  arg1 = (ma::Ray *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = ((ma::Ray const *)arg1)->intersects((ma::AABB const &)*arg2);
  jresult = new std::pair< bool,float >((const std::pair< bool,float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Ray(void * jarg1) {
  ma::Ray *arg1 = (ma::Ray *) 0 ;
  
  arg1 = (ma::Ray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sphere__SWIG_0() {
  void * jresult ;
  ma::Sphere *result = 0 ;
  
  result = (ma::Sphere *)new ma::Sphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sphere__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  float arg2 ;
  ma::Sphere *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (ma::Sphere *)new ma::Sphere((ma::Vector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Sphere_getRadius(void * jarg1) {
  float jresult ;
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  float result;
  
  arg1 = (ma::Sphere *)jarg1; 
  result = (float)((ma::Sphere const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sphere_setRadius(void * jarg1, float jarg2) {
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Sphere *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sphere_getCenter(void * jarg1) {
  void * jresult ;
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::Sphere *)jarg1; 
  result = (ma::Vector3 *) &((ma::Sphere const *)arg1)->getCenter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sphere_setCenter(void * jarg1, void * jarg2) {
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Sphere *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setCenter((ma::Vector3 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sphere_intersects__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  ma::Sphere *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Sphere *)jarg1; 
  arg2 = (ma::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Sphere const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Sphere const *)arg1)->intersects((ma::Sphere const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sphere_intersects__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  ma::AABB *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Sphere *)jarg1; 
  arg2 = (ma::AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AABB const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Sphere const *)arg1)->intersects((ma::AABB const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sphere_intersects__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  ma::Plane *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Sphere *)jarg1; 
  arg2 = (ma::Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Plane const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Sphere const *)arg1)->intersects((ma::Plane const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sphere_intersects__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Sphere *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Sphere const *)arg1)->intersects((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sphere_merge(void * jarg1, void * jarg2) {
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  ma::Sphere *arg2 = 0 ;
  
  arg1 = (ma::Sphere *)jarg1; 
  arg2 = (ma::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Sphere const & type is null", 0);
    return ;
  } 
  (arg1)->merge((ma::Sphere const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sphere(void * jarg1) {
  ma::Sphere *arg1 = (ma::Sphere *) 0 ;
  
  arg1 = (ma::Sphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_x_set(void * jarg1, float jarg2) {
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_x_get(void * jarg1) {
  float jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  float result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_y_set(void * jarg1, float jarg2) {
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_y_get(void * jarg1) {
  float jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  float result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_0() {
  void * jresult ;
  ma::Vector2 *result = 0 ;
  
  result = (ma::Vector2 *)new ma::Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ma::Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ma::Vector2 *)new ma::Vector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (ma::Vector2 *)new ma::Vector2(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 ;
  ma::Vector2 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (ma::Vector2 *)new ma::Vector2((float const (*))arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_4(void * jarg1) {
  void * jresult ;
  int *arg1 ;
  ma::Vector2 *result = 0 ;
  
  arg1 = (int *)jarg1; 
  result = (ma::Vector2 *)new ma::Vector2((int const (*))arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_swap(void * jarg1, void * jarg2) {
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 *arg2 = 0 ;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_ptr__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  float *result = 0 ;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = (float *)(arg1)->ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_length(void * jarg1) {
  float jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  float result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = (float)((ma::Vector2 const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_squaredLength(void * jarg1) {
  float jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  float result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = (float)((ma::Vector2 const *)arg1)->squaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_distance(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Vector2 const *)arg1)->distance((ma::Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_squaredDistance(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Vector2 const *)arg1)->squaredDistance((ma::Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Vector2 const *)arg1)->dotProduct((ma::Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_normalise(void * jarg1) {
  float jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  float result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = (float)(arg1)->normalise();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_midPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 *arg2 = 0 ;
  ma::Vector2 result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Vector2 const *)arg1)->midPoint((ma::Vector2 const &)*arg2);
  jresult = new ma::Vector2((const ma::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_makeFloor(void * jarg1, void * jarg2) {
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 *arg2 = 0 ;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return ;
  } 
  (arg1)->makeFloor((ma::Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_makeCeil(void * jarg1, void * jarg2) {
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 *arg2 = 0 ;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return ;
  } 
  (arg1)->makeCeil((ma::Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_perpendicular(void * jarg1) {
  void * jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = ((ma::Vector2 const *)arg1)->perpendicular();
  jresult = new ma::Vector2((const ma::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_crossProduct(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Vector2 const *)arg1)->crossProduct((ma::Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_randomDeviant(void * jarg1, float jarg2) {
  void * jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  float arg2 ;
  ma::Vector2 result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((ma::Vector2 const *)arg1)->randomDeviant(arg2);
  jresult = new ma::Vector2((const ma::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2_isZeroLength(void * jarg1) {
  unsigned int jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  bool result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = (bool)((ma::Vector2 const *)arg1)->isZeroLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_normalisedCopy(void * jarg1) {
  void * jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = ((ma::Vector2 const *)arg1)->normalisedCopy();
  jresult = new ma::Vector2((const ma::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_reflect(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Vector2 *arg2 = 0 ;
  ma::Vector2 result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Vector2 const *)arg1)->reflect((ma::Vector2 const &)*arg2);
  jresult = new ma::Vector2((const ma::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2_isNaN(void * jarg1) {
  unsigned int jresult ;
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  bool result;
  
  arg1 = (ma::Vector2 *)jarg1; 
  result = (bool)((ma::Vector2 const *)arg1)->isNaN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_rotate(void * jarg1, void * jarg2, void * jarg3) {
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Vector2 *arg3 = 0 ;
  
  arg1 = (ma::Vector2 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector2 const & type is null", 0);
    return ;
  } 
  (arg1)->rotate((ma::Radian const &)*arg2,(ma::Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_ZERO_get() {
  void * jresult ;
  ma::Vector2 *result = 0 ;
  
  result = (ma::Vector2 *)&ma::Vector2::ZERO;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_UNIT_X_get() {
  void * jresult ;
  ma::Vector2 *result = 0 ;
  
  result = (ma::Vector2 *)&ma::Vector2::UNIT_X;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_UNIT_Y_get() {
  void * jresult ;
  ma::Vector2 *result = 0 ;
  
  result = (ma::Vector2 *)&ma::Vector2::UNIT_Y;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_NEGATIVE_UNIT_X_get() {
  void * jresult ;
  ma::Vector2 *result = 0 ;
  
  result = (ma::Vector2 *)&ma::Vector2::NEGATIVE_UNIT_X;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_NEGATIVE_UNIT_Y_get() {
  void * jresult ;
  ma::Vector2 *result = 0 ;
  
  result = (ma::Vector2 *)&ma::Vector2::NEGATIVE_UNIT_Y;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_UNIT_SCALE_get() {
  void * jresult ;
  ma::Vector2 *result = 0 ;
  
  result = (ma::Vector2 *)&ma::Vector2::UNIT_SCALE;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector2(void * jarg1) {
  ma::Vector2 *arg1 = (ma::Vector2 *) 0 ;
  
  arg1 = (ma::Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_x_set(void * jarg1, float jarg2) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_x_get(void * jarg1) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_y_set(void * jarg1, float jarg2) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_y_get(void * jarg1) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_z_set(void * jarg1, float jarg2) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_z_get(void * jarg1) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_0() {
  void * jresult ;
  ma::Vector3 *result = 0 ;
  
  result = (ma::Vector3 *)new ma::Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (ma::Vector3 *)new ma::Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_2(void * jarg1) {
  void * jresult ;
  float *arg1 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (ma::Vector3 *)new ma::Vector3((float const (*))arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_3(void * jarg1) {
  void * jresult ;
  int *arg1 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (int *)jarg1; 
  result = (ma::Vector3 *)new ma::Vector3((int const (*))arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_5(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (ma::Vector3 *)new ma::Vector3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_swap(void * jarg1, void * jarg2) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_ptr__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (float *)(arg1)->ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_length(void * jarg1) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (float)((ma::Vector3 const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_squaredLength(void * jarg1) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (float)((ma::Vector3 const *)arg1)->squaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_distance(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Vector3 const *)arg1)->distance((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_squaredDistance(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Vector3 const *)arg1)->squaredDistance((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Vector3 const *)arg1)->dotProduct((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_absDotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Vector3 const *)arg1)->absDotProduct((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_normalise(void * jarg1) {
  float jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  float result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (float)(arg1)->normalise();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_crossProduct(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Vector3 const *)arg1)->crossProduct((ma::Vector3 const &)*arg2);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_midPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Vector3 const *)arg1)->midPoint((ma::Vector3 const &)*arg2);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_makeFloor(void * jarg1, void * jarg2) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->makeFloor((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_makeCeil(void * jarg1, void * jarg2) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->makeCeil((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_perpendicular(void * jarg1) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = ((ma::Vector3 const *)arg1)->perpendicular();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_randomDeviant__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Vector3 const *)arg1)->randomDeviant((ma::Radian const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_randomDeviant__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = ((ma::Vector3 const *)arg1)->randomDeviant((ma::Radian const &)*arg2);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_angleBetween(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Radian result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (arg1)->angleBetween((ma::Vector3 const &)*arg2);
  jresult = new ma::Radian((const ma::Radian &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_getRotationTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  ma::Quaternion result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Vector3 const *)arg1)->getRotationTo((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_getRotationTo__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Quaternion result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Vector3 const *)arg1)->getRotationTo((ma::Vector3 const &)*arg2);
  jresult = new ma::Quaternion((const ma::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector3_isZeroLength(void * jarg1) {
  unsigned int jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  bool result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (bool)((ma::Vector3 const *)arg1)->isZeroLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_normalisedCopy(void * jarg1) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = ((ma::Vector3 const *)arg1)->normalisedCopy();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_reflect(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((ma::Vector3 const *)arg1)->reflect((ma::Vector3 const &)*arg2);
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector3_positionEquals__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)((ma::Vector3 const *)arg1)->positionEquals((ma::Vector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector3_positionEquals__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Vector3 const *)arg1)->positionEquals((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector3_positionCloses__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)((ma::Vector3 const *)arg1)->positionCloses((ma::Vector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector3_positionCloses__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Vector3 const *)arg1)->positionCloses((ma::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector3_directionEquals(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Radian *arg3 = 0 ;
  bool result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (ma::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Vector3 const *)arg1)->directionEquals((ma::Vector3 const &)*arg2,(ma::Radian const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector3_isNaN(void * jarg1) {
  unsigned int jresult ;
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  bool result;
  
  arg1 = (ma::Vector3 *)jarg1; 
  result = (bool)((ma::Vector3 const *)arg1)->isNaN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_rotateXZBy(void * jarg1, void * jarg2, void * jarg3) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rotateXZBy((ma::Radian const &)*arg2,(ma::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_rotateXYBy(void * jarg1, void * jarg2, void * jarg3) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rotateXYBy((ma::Radian const &)*arg2,(ma::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_rotateYZBy(void * jarg1, void * jarg2, void * jarg3) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  ma::Radian *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  arg2 = (ma::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Radian const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rotateYZBy((ma::Radian const &)*arg2,(ma::Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_ZERO_get() {
  void * jresult ;
  ma::Vector3 *result = 0 ;
  
  result = (ma::Vector3 *)&ma::Vector3::ZERO;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_UNIT_X_get() {
  void * jresult ;
  ma::Vector3 *result = 0 ;
  
  result = (ma::Vector3 *)&ma::Vector3::UNIT_X;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_UNIT_Y_get() {
  void * jresult ;
  ma::Vector3 *result = 0 ;
  
  result = (ma::Vector3 *)&ma::Vector3::UNIT_Y;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_UNIT_Z_get() {
  void * jresult ;
  ma::Vector3 *result = 0 ;
  
  result = (ma::Vector3 *)&ma::Vector3::UNIT_Z;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_NEGATIVE_UNIT_X_get() {
  void * jresult ;
  ma::Vector3 *result = 0 ;
  
  result = (ma::Vector3 *)&ma::Vector3::NEGATIVE_UNIT_X;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_NEGATIVE_UNIT_Y_get() {
  void * jresult ;
  ma::Vector3 *result = 0 ;
  
  result = (ma::Vector3 *)&ma::Vector3::NEGATIVE_UNIT_Y;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_NEGATIVE_UNIT_Z_get() {
  void * jresult ;
  ma::Vector3 *result = 0 ;
  
  result = (ma::Vector3 *)&ma::Vector3::NEGATIVE_UNIT_Z;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_UNIT_SCALE_get() {
  void * jresult ;
  ma::Vector3 *result = 0 ;
  
  result = (ma::Vector3 *)&ma::Vector3::UNIT_SCALE;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector3(void * jarg1) {
  ma::Vector3 *arg1 = (ma::Vector3 *) 0 ;
  
  arg1 = (ma::Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_x_set(void * jarg1, float jarg2) {
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_x_get(void * jarg1) {
  float jresult ;
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  float result;
  
  arg1 = (ma::Vector4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_y_set(void * jarg1, float jarg2) {
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_y_get(void * jarg1) {
  float jresult ;
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  float result;
  
  arg1 = (ma::Vector4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_z_set(void * jarg1, float jarg2) {
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_z_get(void * jarg1) {
  float jresult ;
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  float result;
  
  arg1 = (ma::Vector4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_w_set(void * jarg1, float jarg2) {
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_w_get(void * jarg1) {
  float jresult ;
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  float result;
  
  arg1 = (ma::Vector4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_0() {
  void * jresult ;
  ma::Vector4 *result = 0 ;
  
  result = (ma::Vector4 *)new ma::Vector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ma::Vector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ma::Vector4 *)new ma::Vector4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_2(void * jarg1) {
  void * jresult ;
  float *arg1 ;
  ma::Vector4 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (ma::Vector4 *)new ma::Vector4((float const (*))arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_3(void * jarg1) {
  void * jresult ;
  int *arg1 ;
  ma::Vector4 *result = 0 ;
  
  arg1 = (int *)jarg1; 
  result = (ma::Vector4 *)new ma::Vector4((int const (*))arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_5(float jarg1) {
  void * jresult ;
  float arg1 ;
  ma::Vector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (ma::Vector4 *)new ma::Vector4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_6(void * jarg1) {
  void * jresult ;
  ma::Vector3 *arg1 = 0 ;
  ma::Vector4 *result = 0 ;
  
  arg1 = (ma::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::Vector4 *)new ma::Vector4((ma::Vector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_swap(void * jarg1, void * jarg2) {
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  ma::Vector4 *arg2 = 0 ;
  
  arg1 = (ma::Vector4 *)jarg1; 
  arg2 = (ma::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector4 & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector4_ptr__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  float *result = 0 ;
  
  arg1 = (ma::Vector4 *)jarg1; 
  result = (float *)(arg1)->ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  ma::Vector4 *arg2 = 0 ;
  float result;
  
  arg1 = (ma::Vector4 *)jarg1; 
  arg2 = (ma::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector4 const & type is null", 0);
    return 0;
  } 
  result = (float)((ma::Vector4 const *)arg1)->dotProduct((ma::Vector4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector4_isNaN(void * jarg1) {
  unsigned int jresult ;
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  bool result;
  
  arg1 = (ma::Vector4 *)jarg1; 
  result = (bool)((ma::Vector4 const *)arg1)->isNaN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector4_ZERO_get() {
  void * jresult ;
  ma::Vector4 *result = 0 ;
  
  result = (ma::Vector4 *)&ma::Vector4::ZERO;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector4(void * jarg1) {
  ma::Vector4 *arg1 = (ma::Vector4 *) 0 ;
  
  arg1 = (ma::Vector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transform_m_vPos_set(void * jarg1, void * jarg2) {
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Vector3 *arg2 = (ma::Vector3 *) 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transform_m_vPos_get(void * jarg1) {
  void * jresult ;
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  result = (ma::Vector3 *)& ((arg1)->m_vPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transform_m_qRot_set(void * jarg1, void * jarg2) {
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Quaternion *arg2 = (ma::Quaternion *) 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2; 
  if (arg1) (arg1)->m_qRot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transform_m_qRot_get(void * jarg1) {
  void * jresult ;
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  result = (ma::Quaternion *)& ((arg1)->m_qRot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transform_m_vScale_set(void * jarg1, void * jarg2) {
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Vector3 *arg2 = (ma::Vector3 *) 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2; 
  if (arg1) (arg1)->m_vScale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transform_m_vScale_get(void * jarg1) {
  void * jresult ;
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  result = (ma::Vector3 *)& ((arg1)->m_vScale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Transform() {
  void * jresult ;
  ma::Transform *result = 0 ;
  
  result = (ma::Transform *)new ma::Transform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Transform(void * jarg1) {
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformInverse(void * jarg1, void * jarg2) {
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Transform *arg2 = (ma::Transform *) 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  arg2 = (ma::Transform *)jarg2; 
  ma::TransformInverse(arg1,(ma::Transform const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformMul(void * jarg1, void * jarg2, void * jarg3) {
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Transform *arg2 = (ma::Transform *) 0 ;
  ma::Transform *arg3 = (ma::Transform *) 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  arg2 = (ma::Transform *)jarg2; 
  arg3 = (ma::Transform *)jarg3; 
  ma::TransformMul(arg1,(ma::Transform const *)arg2,(ma::Transform const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformInvMul(void * jarg1, void * jarg2, void * jarg3) {
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Transform *arg2 = (ma::Transform *) 0 ;
  ma::Transform *arg3 = (ma::Transform *) 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  arg2 = (ma::Transform *)jarg2; 
  arg3 = (ma::Transform *)jarg3; 
  ma::TransformInvMul(arg1,(ma::Transform const *)arg2,(ma::Transform const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatrixFromTransform(void * jarg1, void * jarg2) {
  ma::Matrix4 *arg1 = (ma::Matrix4 *) 0 ;
  ma::Transform *arg2 = (ma::Transform *) 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1; 
  arg2 = (ma::Transform *)jarg2; 
  ma::MatrixFromTransform(arg1,(ma::Transform const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformFromMatrix(void * jarg1, void * jarg2) {
  ma::Transform *arg1 = (ma::Transform *) 0 ;
  ma::Matrix4 *arg2 = (ma::Matrix4 *) 0 ;
  
  arg1 = (ma::Transform *)jarg1; 
  arg2 = (ma::Matrix4 *)jarg2; 
  ma::TransformFromMatrix(arg1,(ma::Matrix4 const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Any__SWIG_0() {
  void * jresult ;
  ma::Any *result = 0 ;
  
  result = (ma::Any *)new ma::Any();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Any__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::Any *arg1 = 0 ;
  ma::Any *result = 0 ;
  
  arg1 = (ma::Any *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Any const & type is null", 0);
    return 0;
  } 
  result = (ma::Any *)new ma::Any((ma::Any const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Any(void * jarg1) {
  ma::Any *arg1 = (ma::Any *) 0 ;
  
  arg1 = (ma::Any *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Any_swap(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Any *arg1 = (ma::Any *) 0 ;
  ma::Any *arg2 = 0 ;
  ma::Any *result = 0 ;
  
  arg1 = (ma::Any *)jarg1; 
  arg2 = (ma::Any *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Any & type is null", 0);
    return 0;
  } 
  result = (ma::Any *) &(arg1)->swap(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Any_isEmpty(void * jarg1) {
  unsigned int jresult ;
  ma::Any *arg1 = (ma::Any *) 0 ;
  bool result;
  
  arg1 = (ma::Any *)jarg1; 
  result = (bool)((ma::Any const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Any_getType(void * jarg1) {
  void * jresult ;
  ma::Any *arg1 = (ma::Any *) 0 ;
  std::type_info *result = 0 ;
  
  arg1 = (ma::Any *)jarg1; 
  result = (std::type_info *) &((ma::Any const *)arg1)->getType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Any_destroy(void * jarg1) {
  ma::Any *arg1 = (ma::Any *) 0 ;
  
  arg1 = (ma::Any *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnyNumeric__SWIG_0() {
  void * jresult ;
  ma::AnyNumeric *result = 0 ;
  
  result = (ma::AnyNumeric *)new ma::AnyNumeric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnyNumeric__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::AnyNumeric *arg1 = 0 ;
  ma::AnyNumeric *result = 0 ;
  
  arg1 = (ma::AnyNumeric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::AnyNumeric const & type is null", 0);
    return 0;
  } 
  result = (ma::AnyNumeric *)new ma::AnyNumeric((ma::AnyNumeric const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnyNumeric(void * jarg1) {
  ma::AnyNumeric *arg1 = (ma::AnyNumeric *) 0 ;
  
  arg1 = (ma::AnyNumeric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetStrTypeAny(void * jarg1) {
  void * jresult ;
  ma::Any *arg1 = 0 ;
  std::string result;
  
  arg1 = (ma::Any *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Any const & type is null", 0);
    return 0;
  } 
  result = ma::GetStrTypeAny((ma::Any const &)*arg1);
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DualQuaternion__SWIG_0() {
  void * jresult ;
  ma::DualQuaternion *result = 0 ;
  
  result = (ma::DualQuaternion *)new ma::DualQuaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DualQuaternion__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  ma::DualQuaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (ma::DualQuaternion *)new ma::DualQuaternion(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DualQuaternion__SWIG_2(void * jarg1) {
  void * jresult ;
  ma::Matrix4 *arg1 = 0 ;
  ma::DualQuaternion *result = 0 ;
  
  arg1 = (ma::Matrix4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix4 const & type is null", 0);
    return 0;
  } 
  result = (ma::DualQuaternion *)new ma::DualQuaternion((ma::Matrix4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DualQuaternion__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::Quaternion *arg1 = 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::DualQuaternion *result = 0 ;
  
  arg1 = (ma::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (ma::DualQuaternion *)new ma::DualQuaternion((ma::Quaternion const &)*arg1,(ma::Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DualQuaternion__SWIG_4(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  ma::DualQuaternion *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (ma::DualQuaternion *)new ma::DualQuaternion(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DualQuaternion_ptr__SWIG_0(void * jarg1) {
  void * jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float *result = 0 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (float *)(arg1)->ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_swap(void * jarg1, void * jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  ma::DualQuaternion *arg2 = 0 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (ma::DualQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::DualQuaternion & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DualQuaternion_isNaN(void * jarg1) {
  unsigned int jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  bool result;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (bool)((ma::DualQuaternion const *)arg1)->isNaN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_fromRotationTranslation(void * jarg1, void * jarg2, void * jarg3) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->fromRotationTranslation((ma::Quaternion const &)*arg2,(ma::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_toRotationTranslation(void * jarg1, void * jarg2, void * jarg3) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  ma::Quaternion *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 & type is null", 0);
    return ;
  } 
  ((ma::DualQuaternion const *)arg1)->toRotationTranslation(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_fromTransformationMatrix(void * jarg1, void * jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  ma::Matrix4 *arg2 = 0 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (ma::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix4 const & type is null", 0);
    return ;
  } 
  (arg1)->fromTransformationMatrix((ma::Matrix4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_toTransformationMatrix(void * jarg1, void * jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  ma::Matrix4 *arg2 = 0 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (ma::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Matrix4 & type is null", 0);
    return ;
  } 
  ((ma::DualQuaternion const *)arg1)->toTransformationMatrix(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_w_set(void * jarg1, float jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DualQuaternion_w_get(void * jarg1) {
  float jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float result;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_x_set(void * jarg1, float jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DualQuaternion_x_get(void * jarg1) {
  float jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float result;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_y_set(void * jarg1, float jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DualQuaternion_y_get(void * jarg1) {
  float jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float result;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_z_set(void * jarg1, float jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DualQuaternion_z_get(void * jarg1) {
  float jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float result;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_dw_set(void * jarg1, float jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dw = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DualQuaternion_dw_get(void * jarg1) {
  float jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float result;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (float) ((arg1)->dw);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_dx_set(void * jarg1, float jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dx = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DualQuaternion_dx_get(void * jarg1) {
  float jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float result;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (float) ((arg1)->dx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_dy_set(void * jarg1, float jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dy = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DualQuaternion_dy_get(void * jarg1) {
  float jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float result;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (float) ((arg1)->dy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DualQuaternion_dz_set(void * jarg1, float jarg2) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DualQuaternion_dz_get(void * jarg1) {
  float jresult ;
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  float result;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  result = (float) ((arg1)->dz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DualQuaternion(void * jarg1) {
  ma::DualQuaternion *arg1 = (ma::DualQuaternion *) 0 ;
  
  arg1 = (ma::DualQuaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Rectangle_ZERO_get() {
  void * jresult ;
  ma::Rectangle *result = 0 ;
  
  result = (ma::Rectangle *)&ma::Rectangle::ZERO;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_x_set(void * jarg1, float jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_x_get(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_y_set(void * jarg1, float jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_y_get(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_width_set(void * jarg1, float jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_width_get(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_height_set(void * jarg1, float jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_height_get(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rectangle__SWIG_0() {
  void * jresult ;
  ma::Rectangle *result = 0 ;
  
  result = (ma::Rectangle *)new ma::Rectangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rectangle__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ma::Rectangle *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ma::Rectangle *)new ma::Rectangle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rectangle__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ma::Rectangle *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ma::Rectangle *)new ma::Rectangle(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rectangle__SWIG_3(void * jarg1) {
  void * jresult ;
  ma::Rectangle *arg1 = 0 ;
  ma::Rectangle *result = 0 ;
  
  arg1 = (ma::Rectangle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return 0;
  } 
  result = (ma::Rectangle *)new ma::Rectangle((ma::Rectangle const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Rectangle(void * jarg1) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Rectangle_empty() {
  void * jresult ;
  ma::Rectangle *result = 0 ;
  
  result = (ma::Rectangle *) &ma::Rectangle::empty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_isEmpty(void * jarg1) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (bool)((ma::Rectangle const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_set__SWIG_1(void * jarg1, void * jarg2) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  ma::Rectangle *arg2 = 0 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (ma::Rectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return ;
  } 
  (arg1)->set((ma::Rectangle const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_setPosition(void * jarg1, float jarg2, float jarg3) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setPosition(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_left(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float)((ma::Rectangle const *)arg1)->left();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_top(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float)((ma::Rectangle const *)arg1)->top();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_right(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float)((ma::Rectangle const *)arg1)->right();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Rectangle_bottom(void * jarg1) {
  float jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  result = (float)((ma::Rectangle const *)arg1)->bottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_contains__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)((ma::Rectangle const *)arg1)->contains(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_contains__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)((ma::Rectangle const *)arg1)->contains(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_contains__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  ma::Rectangle *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (ma::Rectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Rectangle const *)arg1)->contains((ma::Rectangle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_intersects__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)((ma::Rectangle const *)arg1)->intersects(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rectangle_intersects__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  ma::Rectangle *arg2 = 0 ;
  bool result;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (ma::Rectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return 0;
  } 
  result = (bool)((ma::Rectangle const *)arg1)->intersects((ma::Rectangle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_combine(void * jarg1, void * jarg2, void * jarg3) {
  ma::Rectangle *arg1 = 0 ;
  ma::Rectangle *arg2 = 0 ;
  ma::Rectangle *arg3 = (ma::Rectangle *) 0 ;
  
  arg1 = (ma::Rectangle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return ;
  } 
  arg2 = (ma::Rectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Rectangle const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Rectangle *)jarg3; 
  ma::Rectangle::combine((ma::Rectangle const &)*arg1,(ma::Rectangle const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rectangle_inflate(void * jarg1, float jarg2, float jarg3) {
  ma::Rectangle *arg1 = (ma::Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (ma::Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->inflate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_UpdateFrame(void * jarg1) {
  ma::Time *arg1 = (ma::Time *) 0 ;
  
  arg1 = (ma::Time *)jarg1; 
  (arg1)->UpdateFrame();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Time_GetFrameDeltaTime(void * jarg1) {
  float jresult ;
  ma::Time *arg1 = (ma::Time *) 0 ;
  float result;
  
  arg1 = (ma::Time *)jarg1; 
  result = (float)((ma::Time const *)arg1)->GetFrameDeltaTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Time_GetFrameCount(void * jarg1) {
  void * jresult ;
  ma::Time *arg1 = (ma::Time *) 0 ;
  UINT result;
  
  arg1 = (ma::Time *)jarg1; 
  result = ((ma::Time const *)arg1)->GetFrameCount();
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetTimer() {
  void * jresult ;
  ma::Time *result = 0 ;
  
  result = (ma::Time *)ma::GetTimer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Component() {
  void * jresult ;
  ma::Component *result = 0 ;
  
  result = (ma::Component *)new ma::Component();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Component(void * jarg1) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_Update(void * jarg1) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_OnAddToSceneNode(void * jarg1, void * jarg2) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::SceneNode *arg2 = (ma::SceneNode *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  arg2 = (ma::SceneNode *)jarg2; 
  (arg1)->OnAddToSceneNode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_OnRemoveFromSceneNode(void * jarg1, void * jarg2) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::SceneNode *arg2 = (ma::SceneNode *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  arg2 = (ma::SceneNode *)jarg2; 
  (arg1)->OnRemoveFromSceneNode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Component_OnTransformChange(void * jarg1) {
  ma::Component *arg1 = (ma::Component *) 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  (arg1)->OnTransformChange();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Component_GetSceneNode(void * jarg1) {
  void * jresult ;
  ma::Component *arg1 = (ma::Component *) 0 ;
  ma::SceneNode *result = 0 ;
  
  arg1 = (ma::Component *)jarg1; 
  result = (ma::SceneNode *)(arg1)->GetSceneNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneNode__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ma::Scene *arg1 = (ma::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  ma::SceneNode *result = 0 ;
  
  arg1 = (ma::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ma::SceneNode *)new ma::SceneNode(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneNode__SWIG_1(void * jarg1) {
  void * jresult ;
  ma::Scene *arg1 = (ma::Scene *) 0 ;
  ma::SceneNode *result = 0 ;
  
  arg1 = (ma::Scene *)jarg1; 
  result = (ma::SceneNode *)new ma::SceneNode(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SceneNode(void * jarg1) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Update(void * jarg1) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneNode_GetEnabled(void * jarg1) {
  unsigned int jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  bool result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (bool)((ma::SceneNode const *)arg1)->GetEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetEnabled(void * jarg1, unsigned int jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetPos(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::Vector3 *) &((ma::SceneNode const *)arg1)->GetPos();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetPos(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPos((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetScale(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::Vector3 *) &((ma::SceneNode const *)arg1)->GetScale();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetScale(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetScale((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetRotation(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::Quaternion *) &((ma::SceneNode const *)arg1)->GetRotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetRotation(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Quaternion *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->SetRotation((ma::Quaternion const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetPosWS(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::Vector3 *) &((ma::SceneNode const *)arg1)->GetPosWS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetPosWS(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPosWS((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetRotationWS(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Quaternion *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::Quaternion *) &((ma::SceneNode const *)arg1)->GetRotationWS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetRotationWS(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Quaternion *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->SetRotationWS((ma::Quaternion const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetScaleWS(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::Vector3 *) &((ma::SceneNode const *)arg1)->GetScaleWS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetScaleWS(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetScaleWS((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetForward(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (arg1)->GetForward();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetRight(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (arg1)->GetRight();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetUp(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (arg1)->GetUp();
  jresult = new ma::Vector3((const ma::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Forward(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Forward(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Up(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Up(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Right(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Right(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Translate(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->Translate((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_LookAt__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 *arg3 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (ma::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->LookAt((ma::Vector3 const &)*arg2,(ma::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_LookAt__SWIG_1(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->LookAt((ma::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetTransformWS(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Transform *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::Transform *) &((ma::SceneNode const *)arg1)->GetTransformWS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetTransformWS(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Transform *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Transform const & type is null", 0);
    return ;
  } 
  (arg1)->SetTransformWS((ma::Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetMatrixWS(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Matrix4 *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::Matrix4 *) &((ma::SceneNode const *)arg1)->GetMatrixWS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_RotateAround(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Vector3 *arg2 = 0 ;
  ma::Vector3 arg3 ;
  float arg4 ;
  ma::Vector3 *argp3 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Vector3 const & type is null", 0);
    return ;
  } 
  argp3 = (ma::Vector3 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ma::Vector3", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (float)jarg4; 
  (arg1)->RotateAround((ma::Vector3 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Rotate__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Quaternion *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->Rotate((ma::Quaternion const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Rotate__SWIG_1(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Quaternion *arg2 = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ma::Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->Rotate((ma::Quaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Pitch__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Pitch(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Pitch__SWIG_1(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Pitch(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Yaw__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Yaw(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Yaw__SWIG_1(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Yaw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Roll__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Roll(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_Roll__SWIG_1(void * jarg1, float jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  float arg2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Roll(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetComponentNumber(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  UINT result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (arg1)->GetComponentNumber();
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetComponentByIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  UINT arg2 ;
  UINT *argp2 ;
  ma::Component *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  argp2 = (UINT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ma::Component *)(arg1)->GetComponentByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_AddComponent(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Component *arg2 = (ma::Component *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Component *)jarg2; 
  (arg1)->AddComponent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_RemoveComponent(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Component *arg2 = (ma::Component *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::Component *)jarg2; 
  (arg1)->RemoveComponent(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetParent(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::SceneNode *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::SceneNode *)(arg1)->GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_AddChild(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::SceneNode *arg2 = (ma::SceneNode *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::SceneNode *)jarg2; 
  (arg1)->AddChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_RemoveChild(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::SceneNode *arg2 = (ma::SceneNode *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (ma::SceneNode *)jarg2; 
  (arg1)->RemoveChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_RemoveAllChild(void * jarg1) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  (arg1)->RemoveAllChild();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_FindChildNode(void * jarg1, char * jarg2) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  char *arg2 = (char *) 0 ;
  ma::SceneNode *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ma::SceneNode *)(arg1)->FindChildNode((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetScene(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  ma::Scene *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (ma::Scene *)(arg1)->GetScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneNode_OnLoadOver(void * jarg1) {
  unsigned int jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  bool result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (bool)(arg1)->OnLoadOver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_Clone(void * jarg1, char * jarg2) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  char *arg2 = (char *) 0 ;
  ma::SceneNode *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ma::SceneNode *)(arg1)->Clone((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_OnTransformChange(void * jarg1) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  (arg1)->OnTransformChange();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetUserData(void * jarg1, char * jarg2, void * jarg3) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->SetUserData((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetUserData(void * jarg1, char * jarg2) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  char *arg2 = (char *) 0 ;
  void *result = 0 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (void *)(arg1)->GetUserData((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_SetLastVisibleFrame(void * jarg1, void * jarg2) {
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  UINT arg2 ;
  UINT *argp2 ;
  
  arg1 = (ma::SceneNode *)jarg1; 
  argp2 = (UINT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetLastVisibleFrame(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_GetLastVisibleFrame(void * jarg1) {
  void * jresult ;
  ma::SceneNode *arg1 = (ma::SceneNode *) 0 ;
  UINT result;
  
  arg1 = (ma::SceneNode *)jarg1; 
  result = (arg1)->GetLastVisibleFrame();
  jresult = new UINT((const UINT &)result); 
  return jresult;
}


SWIGEXPORT ma::Any * SWIGSTDCALL CSharp_AnyNumeric_SWIGUpcast(ma::AnyNumeric *jarg1) {
    return (ma::Any *)jarg1;
}

#ifdef __cplusplus
}
#endif

